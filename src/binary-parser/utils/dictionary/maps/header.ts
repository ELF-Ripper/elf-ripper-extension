import { DictionaryType } from "../../../types/dictionary-type";

// Define the mapping of class (EI_CLASS) values to their names
export const ClassMap: DictionaryType = {
  0x00: "UNKNOWN",
  0x01: "ELF32",
  0x02: "ELF64",
};

// Define the mapping of endianess (EI_DATA) values to their names
export const EndianessMap: DictionaryType = {
  0x00: "UNKNOWN",
  0x01: "LITTLE_ENDIAN",
  0x02: "BIG_ENDIAN",
};

// Define the mapping of e_machine values to their names
export const MachineMap: DictionaryType = {
  0: "EM_NONE", // (No machine)
  1: "EM_M32", // (AT&T WE 32100)
  2: "EM_SPARC", // (SUN SPARC)
  3: "EM_386", // (Intel 80386)
  4: "EM_68K", // (Motorola m68k family)
  5: "EM_88K", // (Motorola m88k family)
  6: "EM_IAMCU", // (Intel MCU)
  7: "EM_860", // (Intel 80860)
  8: "EM_MIPS", // (MIPS R3000 big-endian)
  9: "EM_S370", // (IBM System/370)
  10: "EM_MIPS_RS3_LE", // (MIPS R3000 little-endian)
  15: "EM_PARISC", // (HPPA)
  17: "EM_VPP500", // (Fujitsu VPP500)
  18: "EM_SPARC32PLUS", // (Sun's 'v8plus')
  19: "EM_960", // (Intel 80960)
  20: "EM_PPC", // (PowerPC)
  21: "EM_PPC64", // (PowerPC 64-bit)
  22: "EM_S390", // (IBM S390)
  36: "EM_V800", // (NEC V800 series)
  37: "EM_FR20", // (Fujitsu FR20)
  38: "EM_RH32", // (TRW RH-32)
  39: "EM_RCE", // (Motorola RCE)
  40: "EM_ARM", // (ARM)
  41: "EM_FAKE_ALPHA", // (Digital Alpha)
  42: "EM_SH", // (Hitachi SH)
  43: "EM_SPARCV9", // (SPARC v9 64-bit)
  44: "EM_TRICORE", // (Siemens Tricore)
  45: "EM_ARC", // (Argonaut RISC Core)
  46: "EM_H8_300", // (Hitachi H8/300)
  47: "EM_H8_300H", // (Hitachi H8/300H)
  48: "EM_H8S", // (Hitachi H8S)
  49: "EM_H8_500", // (Hitachi H8/500)
  50: "EM_IA_64", // (Intel Merced)
  51: "EM_MIPS_X", // (Stanford MIPS-X)
  52: "EM_COLDFIRE", // (Motorola Coldfire)
  53: "EM_68HC12", // (Motorola M68HC12)
  54: "EM_MMA", // (Fujitsu MMA Multimedia Accelerator)
  55: "EM_PCP", // (Siemens PCP)
  56: "EM_NCPU", // (Sony nCPU embedded RISC)
  57: "EM_NDR1", // (Denso NDR1 microprocessor)
  58: "EM_STARCORE", // (Motorola Start*Core processor)
  59: "EM_ME16", // (Toyota ME16 processor)
  60: "EM_ST100", // (STMicroelectronics ST100 processor)
  61: "EM_TINYJ", // (Advanced Logic Corp. Tinyj emb.fam)
  62: "EM_X86_64", // (AMD x86-64 architecture)
  63: "EM_PDSP", // (Sony DSP Processor)
  64: "EM_PDP10", // (Digital PDP-10)
  65: "EM_PDP11", // (Digital PDP-11)
  66: "EM_FX66", // (Siemens FX66 microcontroller)
  67: "EM_ST9PLUS", // (STMicroelectronics ST9+ 8/16 mc)
  68: "EM_ST7", // (STmicroelectronics ST7 8 bit mc)
  69: "EM_68HC16", // (Motorola MC68HC16 microcontroller)
  70: "EM_68HC11", // (Motorola MC68HC11 microcontroller)
  71: "EM_68HC08", // (Motorola MC68HC08 microcontroller)
  72: "EM_68HC05", // (Motorola MC68HC05 microcontroller)
  73: "EM_SVX", // (Silicon Graphics SVx)
  74: "EM_ST19", // (STMicroelectronics ST19 8 bit mc)
  75: "EM_VAX", // (Digital VAX)
  76: "EM_CRIS", // (Axis Communications 32-bit emb.proc)
  77: "EM_JAVELIN", // (Infineon Technologies 32-bit emb.proc)
  78: "EM_FIREPATH", // (Element 14 64-bit DSP Processor)
  79: "EM_ZSP", // (LSI Logic 16-bit DSP Processor)
  80: "EM_MMIX", // (Donald Knuth's educational 64-bit proc)
  81: "EM_HUANY", // (Harvard University machine-independent object files)
  82: "EM_PRISM", // (SiTera Prism)
  83: "EM_AVR", // (Atmel AVR 8-bit microcontroller)
  84: "EM_FR30", // (Fujitsu FR30)
  85: "EM_D10V", // (Mitsubishi D10V)
  86: "EM_D30V", // (Mitsubishi D30V)
  87: "EM_V850", // (NEC v850)
  88: "EM_M32R", // (Mitsubishi M32R)
  89: "EM_MN10300", // (Matsushita MN10300)
  90: "EM_MN10200", // (Matsushita MN10200)
  91: "EM_PJ", // (picoJava)
  92: "EM_OPENRISC", // (OpenRISC 32-bit embedded processor)
  93: "EM_ARC_COMPACT", // (ARC International ARCompact)
  94: "EM_XTENSA", // (Tensilica Xtensa Architecture)
  95: "EM_VIDEOCORE", // (Alphamosaic VideoCore)
  96: "EM_TMM_GPP", // (Thompson Multimedia General Purpose Proc)
  97: "EM_NS32K", // (National Semi. 32000)
  98: "EM_TPC", // (Tenor Network TPC)
  99: "EM_SNP1K", // (Trebia SNP 1000)
  100: "EM_ST200", // (STMicroelectronics ST200)
  101: "EM_IP2K", // (Ubicom IP2xxx)
  102: "EM_MAX", // (MAX processor)
  103: "EM_CR", // (National Semi. CompactRISC)
  104: "EM_F2MC16", // (Fujitsu F2MC16)
  105: "EM_MSP430", // (Texas Instruments msp430)
  106: "EM_BLACKFIN", // (Analog Devices Blackfin DSP)
  107: "EM_SE_C33", // (Seiko Epson S1C33 family)
  108: "EM_SEP", // (Sharp embedded microprocessor)
  109: "EM_ARCA", // (Arca RISC)
  110: "EM_UNICORE", // (PKU-Unity & MPRC Peking Uni. mc series)
  111: "EM_EXCESS", // (eXcess configurable cpu)
  112: "EM_DXP", // (Icera Semi. Deep Execution Processor)
  113: "EM_ALTERA_NIOS2", // (Altera Nios II)
  114: "EM_CRX", // (National Semi. CompactRISC CRX)
  115: "EM_XGATE", // (Motorola XGATE)
  116: "EM_C166", // (Infineon C16x/XC16x)
  117: "EM_M16C", // (Renesas M16C)
  118: "EM_DSPIC30F", // (Microchip Technology dsPIC30F)
  119: "EM_CE", // (Freescale Communication Engine RISC)
  120: "EM_M32C", // (Renesas M32C)
  131: "EM_TSK3000", // (Altium TSK3000)
  132: "EM_RS08", // (Freescale RS08)
  133: "EM_SHARC", // (Analog Devices SHARC family)
  134: "EM_ECOG2", // (Cyan Technology eCOG2)
  135: "EM_SCORE7", // (Sunplus S+core7 RISC)
  136: "EM_DSP24", // (New Japan Radio (NJR) 24-bit DSP)
  137: "EM_VIDEOCORE3", // (Broadcom VideoCore III)
  138: "EM_LATTICEMICO32", // (RISC for Lattice FPGA)
  139: "EM_SE_C17", // (Seiko Epson C17)
  140: "EM_TI_C6000", // (Texas Instruments TMS320C6000 DSP)
  141: "EM_TI_C2000", // (Texas Instruments TMS320C2000 DSP)
  142: "EM_TI_C5500", // (Texas Instruments TMS320C55x DSP)
  143: "EM_TI_ARP32", // (Texas Instruments App. Specific RISC)
  144: "EM_TI_PRU", // (Texas Instruments Prog. Realtime Unit)
  160: "EM_MMDSP_PLUS", // (STMicroelectronics 64bit VLIW DSP)
  161: "EM_CYPRESS_M8C", // (Cypress M8C)
  162: "EM_R32C", // (Renesas R32C)
  163: "EM_TRIMEDIA", // (NXP Semi. TriMedia)
  164: "EM_QDSP6", // (QUALCOMM DSP6)
  165: "EM_8051", // (Intel 8051 and variants)
  166: "EM_STXP7X", // (STMicroelectronics STxP7x)
  167: "EM_NDS32", // (Andes Tech. compact code emb. RISC)
  168: "EM_ECOG1X", // (Cyan Technology eCOG1X)
  169: "EM_MAXQ30", // (Dallas Semi. MAXQ30 mc)
  170: "EM_XIMO16", // (New Japan Radio (NJR) 16-bit DSP)
  171: "EM_MANIK", // (M2000 Reconfigurable RISC)
  172: "EM_CRAYNV2", // (Cray NV2 vector architecture)
  173: "EM_RX", // (Renesas RX)
  174: "EM_METAG", // (Imagination Tech. META)
  175: "EM_MCST_ELBRUS", // (MCST Elbrus)
  176: "EM_ECOG16", // (Cyan Technology eCOG16)
  177: "EM_CR16", // (National Semi. CompactRISC CR16)
  178: "EM_ETPU", // (Freescale Extended Time Processing Unit)
  179: "EM_SLE9X", // (Infineon Tech. SLE9X)
  180: "EM_L10M", // (Intel L10M)
  181: "EM_K10M", // (Intel K10M)
  183: "EM_AARCH64", // (ARM AARCH64)
  185: "EM_AVR32", // (Atmel 32-bit microprocessor)
  186: "EM_STM8", // (STMicroelectronics STM8)
  187: "EM_TILE64", // (Tilera TILE64)
  188: "EM_TILEPRO", // (Tilera TILEPro)
  189: "EM_MICROBLAZE", // (Xilinx MicroBlaze)
  190: "EM_CUDA", // (NVIDIA CUDA)
  191: "EM_TILEGX", // (Tilera TILE-Gx)
  192: "EM_CLOUDSHIELD", // (CloudShield)
  193: "EM_COREA_1ST", // (KIPO-KAIST Core-A 1st gen.)
  194: "EM_COREA_2ND", // (KIPO-KAIST Core-A 2nd gen.)
  195: "EM_ARCV2", // (Synopsys ARCv2 ISA)
  196: "EM_OPEN8", // (Open8 RISC)
  197: "EM_RL78", // (Renesas RL78)
  198: "EM_VIDEOCORE5", // (Broadcom VideoCore V)
  199: "EM_78KOR", // (Renesas 78KOR)
  200: "EM_56800EX", // (Freescale 56800EX DSC)
  201: "EM_BA1", // (Beyond BA1)
  202: "EM_BA2", // (Beyond BA2)
  203: "EM_XCORE", // (XMOS xCORE)
  204: "EM_MCHP_PIC", // (Microchip 8-bit PIC(r))
  205: "EM_INTELGT", // (Intel Graphics Technology)
  210: "EM_KM32", // (KM211 KM32)
  211: "EM_KMX32", // (KM211 KMX32)
  212: "EM_EMX16", // (KM211 KMX16)
  213: "EM_EMX8", // (KM211 KMX8)
  214: "EM_KVARC", // (KM211 KVARC)
  215: "EM_CDP", // (Paneve CDP)
  216: "EM_COGE", // (Cognitive Smart Memory Processor)
  217: "EM_COOL", // (Bluechip CoolEngine)
  218: "EM_NORC", // (Nanoradio Optimized RISC)
  219: "EM_CSR_KALIMBA", // (CSR Kalimba)
  220: "EM_Z80", // (Zilog Z80)
  221: "EM_VISIUM", // (Controls and Data Services VISIUMcore)
  222: "EM_FT32", // (FTDI Chip FT32)
  223: "EM_MOXIE", // (Moxie processor)
  224: "EM_AMDGPU", // (AMD GPU)
  243: "EM_RISCV", // (RISC-V)
  247: "EM_BPF", // (Linux BPF -- in-kernel virtual machine)
  252: "EM_CSKY", // (C-SKY)
};

// Define the mapping of e_type values to their names
export const TypeMap: DictionaryType = {
  0: "ET_NONE (No file type)",
  1: "ET_REL (Relocatable file)",
  2: "ET_EXEC (Executable file)",
  3: "ET_DYN (Shared object file)",
  4: "ET_CORE (Core file)",
  0xfe00: "ET_LOOS (OS-specific range start)",
  0xfeff: "ET_HIOS (OS-specific range end)",
  0xff00: "ET_LOPROC (Processor-specific range start)",
  0xffff: "ET_HIPROC (Processor-specific range end)",
};

import { DictionaryType } from "../../../types/dictionary-type";

// Define the mapping of specific processor architecture  relocation types to their names

export const ARM_TypeMap: DictionaryType = {
  0: "R_ARM_NONE",
  1: "R_ARM_PC24",
  2: "R_ARM_ABS32",
  3: "R_ARM_REL32",
  4: "R_ARM_PC13",
  5: "R_ARM_ABS16",
  6: "R_ARM_ABS12",
  7: "R_ARM_THM_ABS5",
  8: "R_ARM_ABS8",
  9: "R_ARM_SBREL32",
  10: "R_ARM_THM_PC22",
  11: "R_ARM_THM_PC8",
  12: "R_ARM_AMP_VCALL9",
  13: "R_ARM_SWI24",
  14: "R_ARM_THM_SWI8",
  15: "R_ARM_XPC25",
  17: "R_ARM_TLS_DTPMOD32",
  18: "R_ARM_TLS_DTPOFF32",
  19: "R_ARM_TLS_TPOFF32",
  20: "R_ARM_COPY",
  21: "R_ARM_GLOB_DAT",
  22: "R_ARM_JUMP_SLOT",
  23: "R_ARM_RELATIVE",
  24: "R_ARM_GOTOFF",
  25: "R_ARM_GOTPC",
  26: "R_ARM_GOT32",
  27: "R_ARM_PLT32",
  28: "R_ARM_CALL",
  29: "R_ARM_JUMP24",
  30: "R_ARM_THM_JUMP24",
  31: "R_ARM_BASE_ABS",
  35: "R_ARM_LDR_SBREL_11_0",
  36: "R_ARM_ALU_SBREL_19_12",
  37: "R_ARM_ALU_SBREL_27_20",
  39: "R_ARM_SBREL31",
  40: "R_ARM_V4BX",
  41: "R_ARM_TARGET2",
  42: "R_ARM_PREL31",
  43: "R_ARM_MOVW_ABS_NC",
  44: "R_ARM_MOVT_ABS",
  45: "R_ARM_MOVW_PREL_NC",
  46: "R_ARM_MOVT_PREL",
  47: "R_ARM_THM_MOVW_ABS_NC",
  48: "R_ARM_THM_MOVT_ABS",
  49: "R_ARM_THM_MOVW_PREL_NC",
  50: "R_ARM_THM_MOVT_PREL",
  51: "R_ARM_THM_JUMP19",
  52: "R_ARM_THM_JUMP6",
  53: "R_ARM_THM_ALU_PREL_11_0",
  54: "R_ARM_THM_PC12",
  55: "R_ARM_ABS32_NOI",
  56: "R_ARM_REL32_NOI",
  57: "R_ARM_ALU_PC_G0_NC",
  58: "R_ARM_ALU_PC_G0",
  59: "R_ARM_ALU_PC_G1_NC",
  60: "R_ARM_ALU_PC_G1",
  61: "R_ARM_ALU_PC_G2",
  62: "R_ARM_LDR_PC_G1",
  63: "R_ARM_LDR_PC_G2",
  64: "R_ARM_LDRS_PC_G0",
  65: "R_ARM_LDRS_PC_G1",
  66: "R_ARM_LDRS_PC_G2",
  67: "R_ARM_LDC_PC_G0",
  68: "R_ARM_LDC_PC_G1",
  69: "R_ARM_LDC_PC_G2",
  70: "R_ARM_ALU_SB_G0_NC",
  71: "R_ARM_ALU_SB_G0",
  72: "R_ARM_ALU_SB_G1_NC",
  73: "R_ARM_ALU_SB_G1",
  74: "R_ARM_ALU_SB_G2",
  75: "R_ARM_LDR_SB_G0",
  76: "R_ARM_LDR_SB_G1",
  77: "R_ARM_LDR_SB_G2",
  78: "R_ARM_LDRS_SB_G0",
  79: "R_ARM_LDRS_SB_G1",
  80: "R_ARM_LDRS_SB_G2",
  81: "R_ARM_LDC_SB_G0",
  82: "R_ARM_LDC_SB_G1",
  83: "R_ARM_LDC_SB_G2",
  84: "R_ARM_MOVW_BREL_NC",
  85: "R_ARM_MOVT_BREL",
  86: "R_ARM_MOVW_BREL",
  87: "R_ARM_THM_MOVW_BREL_NC",
  88: "R_ARM_THM_MOVT_BREL",
  89: "R_ARM_THM_MOVW_BREL",
  90: "R_ARM_TLS_GOTDESC",
  91: "R_ARM_TLS_CALL",
  92: "R_ARM_TLS_DESCSEQ",
  93: "R_ARM_THM_TLS_CALL",
  94: "R_ARM_PLT32_ABS",
  95: "R_ARM_GOT_ABS",
  96: "R_ARM_GOT_PREL",
  97: "R_ARM_GOT_BREL12",
  98: "R_ARM_GOTOFF12",
  99: "R_ARM_GOTRELAX",
  100: "R_ARM_GNU_VTENTRY",
  101: "R_ARM_GNU_VTINHERIT",
  102: "R_ARM_THM_PC11",
  103: "R_ARM_THM_PC9",
  104: "R_ARM_TLS_GD32",
  105: "R_ARM_TLS_LDM32",
  106: "R_ARM_TLS_LDO32",
  107: "R_ARM_TLS_IE32",
  108: "R_ARM_TLS_LE32",
  109: "R_ARM_TLS_LDO12",
  110: "R_ARM_TLS_LE12",
  111: "R_ARM_TLS_IE12GP",
  128: "R_ARM_ME_TOO",
  129: "R_ARM_THM_TLS_DESCSEQ",
  130: "R_ARM_THM_TLS_DESCSEQ",
  131: "R_ARM_THM_GOT_BREL12",
  160: "R_ARM_IRELATIVE",
  249: "R_ARM_RXPC25",
  250: "R_ARM_RSBREL32",
  251: "R_ARM_THM_RPC22",
  252: "R_ARM_RREL32",
  253: "R_ARM_RABS22",
  254: "R_ARM_RPC24",
  255: "R_ARM_RBASE",
  256: "R_ARM_NUM",
};
export const x86_64_TypeMap: DictionaryType = {
  0: "R_X86_64_NONE",
  1: "R_X86_64_64",
  2: "R_X86_64_PC32",
  3: "R_X86_64_GOT32",
  4: "R_X86_64_PLT32",
  5: "R_X86_64_COPY",
  6: "R_X86_64_GLOB_DAT",
  7: "R_X86_64_JUMP_SLOT",
  8: "R_X86_64_RELATIVE",
  9: "R_X86_64_GOTPCREL",
  10: "R_X86_64_32",
  11: "R_X86_64_32S",
  12: "R_X86_64_16",
  13: "R_X86_64_PC16",
  14: "R_X86_64_8",
  15: "R_X86_64_PC8",
  16: "R_X86_64_DTPMOD64",
  17: "R_X86_64_DTPOFF64",
  18: "R_X86_64_TPOFF64",
  19: "R_X86_64_TLSGD",
  20: "R_X86_64_TLSLD",
  21: "R_X86_64_DTPOFF32",
  22: "R_X86_64_GOTTPOFF",
  23: "R_X86_64_TPOFF32",
  24: "R_X86_64_PC64",
  25: "R_X86_64_GOTOFF64",
  26: "R_X86_64_GOTPC32",
  27: "R_X86_64_GOT64",
  28: "R_X86_64_GOTPCREL64",
  29: "R_X86_64_GOTPC64",
  30: "R_X86_64_GOTPLT64",
  31: "R_X86_64_PLTOFF64",
  32: "R_X86_64_SIZE32",
  33: "R_X86_64_SIZE64",
  34: "R_X86_64_GOTPC32_TLSDESC",
  35: "R_X86_64_TLSDESC_CALL",
  36: "R_X86_64_TLSDESC",
  37: "R_X86_64_IRELATIVE",
  38: "R_X86_64_RELATIVE64",
  39: "Reserved(R_X86_64_PC32_BND)",
  40: "Reserved(R_X86_64_PLT32_BND)",
  41: "R_X86_64_GOTPCRELX",
  42: "R_X86_64_REX_GOTPCRELX",
  43: "R_X86_64_NUM",
};
export const M68k_TypeMap: DictionaryType = {
  0: "R_68K_NONE" /* No reloc */,
  1: "R_68K_32" /* Direct 32 bit  */,
  2: "R_68K_16" /* Direct 16 bit  */,
  3: "R_68K_8" /* Direct 8 bit  */,
  4: "R_68K_PC32" /* PC relative 32 bit */,
  5: "R_68K_PC16" /* PC relative 16 bit */,
  6: "R_68K_PC8" /* PC relative 8 bit */,
  7: "R_68K_GOT32" /* 32 bit PC relative GOT entry */,
  8: "R_68K_GOT16" /* 16 bit PC relative GOT entry */,
  9: "R_68K_GOT8" /* 8 bit PC relative GOT entry */,
  10: "R_68K_GOT32O" /* 32 bit GOT offset */,
  11: "R_68K_GOT16O" /* 16 bit GOT offset */,
  12: "R_68K_GOT8O" /* 8 bit GOT offset */,
  13: "R_68K_PLT32" /* 32 bit PC relative PLT address */,
  14: "R_68K_PLT16" /* 16 bit PC relative PLT address */,
  15: "R_68K_PLT8" /* 8 bit PC relative PLT address */,
  16: "R_68K_PLT32O" /* 32 bit PLT offset */,
  17: "R_68K_PLT16O" /* 16 bit PLT offset */,
  18: "R_68K_PLT8O" /* 8 bit PLT offset */,
  19: "R_68K_COPY" /* Copy symbol at runtime */,
  20: "R_68K_GLOB_DAT" /* Create GOT entry */,
  21: "R_68K_JMP_SLOT" /* Create PLT entry */,
  22: "R_68K_RELATIVE" /* Adjust by program base */,
  25: "R_68K_TLS_GD32" /* 32 bit GOT offset for GD */,
  26: "R_68K_TLS_GD16" /* 16 bit GOT offset for GD */,
  27: "R_68K_TLS_GD8" /* 8 bit GOT offset for GD */,
  28: "R_68K_TLS_LDM32" /* 32 bit GOT offset for LDM */,
  29: "R_68K_TLS_LDM16" /* 16 bit GOT offset for LDM */,
  30: "R_68K_TLS_LDM8" /* 8 bit GOT offset for LDM */,
  31: "R_68K_TLS_LDO32" /* 32 bit module-relative offset */,
  32: "R_68K_TLS_LDO16" /* 16 bit module-relative offset */,
  33: "R_68K_TLS_LDO8" /* 8 bit module-relative offset */,
  34: "R_68K_TLS_IE32" /* 32 bit GOT offset for IE */,
  35: "R_68K_TLS_IE16" /* 16 bit GOT offset for IE */,
  36: "R_68K_TLS_IE8" /* 8 bit GOT offset for IE */,
  37: "R_68K_TLS_LE32" /* 32 bit offset relative to static TLS block */,
  38: "R_68K_TLS_LE16" /* 16 bit offset relative to static TLS block */,
  39: "R_68K_TLS_LE8" /* 8 bit offset relative to static TLS block */,
  40: "R_68K_TLS_DTPMOD32" /* 32 bit module number */,
  41: "R_68K_TLS_DTPREL32" /* 32 bit module-relative offset */,
  42: "R_68K_TLS_TPREL32" /* 32 bit TP-relative offset */,
  43: "R_68K_NUM",
};
export const I386_TypeMap: DictionaryType = {
  0: "R_386_NONE" /* No reloc */,
  1: "R_386_32" /* Direct 32 bit  */,
  2: "R_386_PC32" /* PC relative 32 bit */,
  3: "R_386_GOT32" /* 32 bit GOT entry */,
  4: "R_386_PLT32" /* 32 bit PLT address */,
  5: "R_386_COPY" /* Copy symbol at runtime */,
  6: "R_386_GLOB_DAT" /* Create GOT entry */,
  7: "R_386_JMP_SLOT" /* Create PLT entry */,
  8: "R_386_RELATIVE" /* Adjust by program base */,
  9: "R_386_GOTOFF" /* 32 bit offset to GOT */,
  10: "R_386_GOTPC" /* 32 bit PC relative offset to GOT */,
  11: "R_386_32PLT",
  14: "R_386_TLS_TPOFF" /* Offset in static TLS block */,
  15: "R_386_TLS_IE" /* Address of GOT entry for static TLS block offset */,
  16: "R_386_TLS_GOTIE" /* GOT entry for static TLS block offset */,
  17: "R_386_TLS_LE" /* Offset relative to static TLS block */,
  18: "R_386_TLS_GD" /* Direct 32 bit for GNU version of general dynamic thread local data */,
  19: "R_386_TLS_LDM" /* Direct 32 bit for GNU version of local dynamic thread local data in LE code */,
  20: "R_386_16",
  21: "R_386_PC16",
  22: "R_386_8",
  23: "R_386_PC8",
  24: "R_386_TLS_GD_32" /* Direct 32 bit for general dynamic thread local data */,
  25: "R_386_TLS_GD_PUSH" /* Tag for pushl in GD TLS code */,
  26: "R_386_TLS_GD_CALL" /* Relocation for call to __tls_get_addr() */,
  27: "R_386_TLS_GD_POP" /* Tag for popl in GD TLS code */,
  28: "R_386_TLS_LDM_32" /* Direct 32 bit for local dynamic thread local data in LE code */,
  29: "R_386_TLS_LDM_PUSH" /* Tag for pushl in LDM TLS code */,
  30: "R_386_TLS_LDM_CALL" /* Relocation for call to __tls_get_addr() in LDM code */,
  31: "R_386_TLS_LDM_POP" /* Tag for popl in LDM TLS code */,
  32: "R_386_TLS_LDO_32" /* Offset relative to TLS block */,
  33: "R_386_TLS_IE_32" /* GOT entry for negated static TLS block offset */,
  34: "R_386_TLS_LE_32" /* Negated offset relative to static TLS block */,
  35: "R_386_TLS_DTPMOD32" /* ID of module containing symbol */,
  36: "R_386_TLS_DTPOFF32" /* Offset in TLS block */,
  37: "R_386_TLS_TPOFF32" /* Negated offset in static TLS block */,
  38: "R_386_SIZE32" /* 32-bit symbol size */,
  39: "R_386_TLS_GOTDESC" /* GOT offset for TLS descriptor.  */,
  40: "R_386_TLS_DESC_CALL" /* Marker of call through TLS descriptor for relaxation.  */,
  41: "R_386_TLS_DESC" /* TLS descriptor containing pointer to code and to argument, returning the TLS offset for the symbol.  */,
  42: "R_386_IRELATIVE" /* Adjust indirectly by program base */,
  43: "R_386_GOT32X" /* Load from 32 bit GOT entry, relaxable. */,
  44: "R_386_NUM",
};
export const SPARC_TypeMap: DictionaryType = {
  0: "R_SPARC_NONE" /* No reloc */,
  1: "R_SPARC_8" /* Direct 8 bit */,
  2: "R_SPARC_16" /* Direct 16 bit */,
  3: "R_SPARC_32" /* Direct 32 bit */,
  4: "R_SPARC_DISP8" /* PC relative 8 bit */,
  5: "R_SPARC_DISP16" /* PC relative 16 bit */,
  6: "R_SPARC_DISP32" /* PC relative 32 bit */,
  7: "R_SPARC_WDISP30" /* PC relative 30 bit shifted */,
  8: "R_SPARC_WDISP22" /* PC relative 22 bit shifted */,
  9: "R_SPARC_HI22" /* High 22 bit */,
  10: "R_SPARC_22" /* Direct 22 bit */,
  11: "R_SPARC_13" /* Direct 13 bit */,
  12: "R_SPARC_LO10" /* Truncated 10 bit */,
  13: "R_SPARC_GOT10" /* Truncated 10 bit GOT entry */,
  14: "R_SPARC_GOT13" /* 13 bit GOT entry */,
  15: "R_SPARC_GOT22" /* 22 bit GOT entry shifted */,
  16: "R_SPARC_PC10" /* PC relative 10 bit truncated */,
  17: "R_SPARC_PC22" /* PC relative 22 bit shifted */,
  18: "R_SPARC_WPLT30" /* 30 bit PC relative PLT address */,
  19: "R_SPARC_COPY" /* Copy symbol at runtime */,
  20: "R_SPARC_GLOB_DAT" /* Create GOT entry */,
  21: "R_SPARC_JMP_SLOT" /* Create PLT entry */,
  22: "R_SPARC_RELATIVE" /* Adjust by program base */,
  23: "R_SPARC_UA32" /* Direct 32 bit unaligned */,
  /* Additional Sparc64 relocs.  */
  24: "R_SPARC_PLT32" /* Direct 32 bit ref to PLT entry */,
  25: "R_SPARC_HIPLT22" /* High 22 bit PLT entry */,
  26: "R_SPARC_LOPLT10" /* Truncated 10 bit PLT entry */,
  27: "R_SPARC_PCPLT32" /* PC rel 32 bit ref to PLT entry */,
  28: "R_SPARC_PCPLT22" /* PC rel high 22 bit PLT entry */,
  29: "R_SPARC_PCPLT10" /* PC rel trunc 10 bit PLT entry */,
  30: "R_SPARC_10" /* Direct 10 bit */,
  31: "R_SPARC_11" /* Direct 11 bit */,
  32: "R_SPARC_64" /* Direct 64 bit */,
  33: "R_SPARC_OLO10" /* 10bit with secondary 13bit addend */,
  34: "R_SPARC_HH22" /* Top 22 bits of direct 64 bit */,
  35: "R_SPARC_HM10" /* High middle 10 bits of ... */,
  36: "R_SPARC_LM22" /* Low middle 22 bits of ... */,
  37: "R_SPARC_PC_HH22" /* Top 22 bits of pc rel 64 bit */,
  38: "R_SPARC_PC_HM10" /* High middle 10 bit of ... */,
  39: "R_SPARC_PC_LM22" /* Low miggle 22 bits of ... */,
  40: "R_SPARC_WDISP16" /* PC relative 16 bit shifted */,
  41: "R_SPARC_WDISP19" /* PC relative 19 bit shifted */,
  42: "R_SPARC_GLOB_JMP" /* was part of v9 ABI but was removed */,
  43: "R_SPARC_7" /* Direct 7 bit */,
  44: "R_SPARC_5" /* Direct 5 bit */,
  45: "R_SPARC_6" /* Direct 6 bit */,
  46: "R_SPARC_DISP64" /* PC relative 64 bit */,
  47: "R_SPARC_PLT64" /* Direct 64 bit ref to PLT entry */,
  48: "R_SPARC_HIX22" /* High 22 bit complemented */,
  49: "R_SPARC_LOX10" /* Truncated 11 bit complemented */,
  50: "R_SPARC_H44" /* Direct high 12 of 44 bit */,
  51: "R_SPARC_M44" /* Direct mid 22 of 44 bit */,
  52: "R_SPARC_L44" /* Direct low 10 of 44 bit */,
  53: "R_SPARC_REGISTER" /* Global register usage */,
  54: "R_SPARC_UA64" /* Direct 64 bit unaligned */,
  55: "R_SPARC_UA16" /* Direct 16 bit unaligned */,
  56: "R_SPARC_TLS_GD_HI22",
  57: "R_SPARC_TLS_GD_LO10",
  58: "R_SPARC_TLS_GD_ADD",
  59: "R_SPARC_TLS_GD_CALL",
  60: "R_SPARC_TLS_LDM_HI22",
  61: "R_SPARC_TLS_LDM_LO10",
  62: "R_SPARC_TLS_LDM_ADD",
  63: "R_SPARC_TLS_LDM_CALL",
  64: "R_SPARC_TLS_LDO_HIX22",
  65: "R_SPARC_TLS_LDO_LOX10",
  66: "R_SPARC_TLS_LDO_ADD",
  67: "R_SPARC_TLS_IE_HI22",
  68: "R_SPARC_TLS_IE_LO10",
  69: "R_SPARC_TLS_IE_LD",
  70: "R_SPARC_TLS_IE_LDX",
  71: "R_SPARC_TLS_IE_ADD",
  72: "R_SPARC_TLS_LE_HIX22",
  73: "R_SPARC_TLS_LE_LOX10",
  74: "R_SPARC_TLS_DTPMOD32",
  75: "R_SPARC_TLS_DTPMOD64",
  76: "R_SPARC_TLS_DTPOFF32",
  77: "R_SPARC_TLS_DTPOFF64",
  78: "R_SPARC_TLS_TPOFF32",
  79: "R_SPARC_TLS_TPOFF64",
  80: "R_SPARC_GOTDATA_HIX22",
  81: "R_SPARC_GOTDATA_LOX10",
  82: "R_SPARC_GOTDATA_OP_HIX22",
  83: "R_SPARC_GOTDATA_OP_LOX10",
  84: "R_SPARC_GOTDATA_OP",
  85: "R_SPARC_H34",
  86: "R_SPARC_SIZE32",
  87: "R_SPARC_SIZE64",
  88: "R_SPARC_WDISP10",
  248: "R_SPARC_JMP_IREL",
  249: "R_SPARC_IRELATIVE",
  250: "R_SPARC_GNU_VTINHERIT",
  251: "R_SPARC_GNU_VTENTRY",
  252: "R_SPARC_REV32",
  253: "R_SPARC_NUM",
};
export const MIPS_TypeMap: DictionaryType = {
  0: "R_MIPS_NONE" /* No reloc */,
  1: "R_MIPS_16" /* Direct 16 bit */,
  2: "R_MIPS_32" /* Direct 32 bit */,
  3: "R_MIPS_REL32" /* PC relative 32 bit */,
  4: "R_MIPS_26" /* Direct 26 bit shifted */,
  5: "R_MIPS_HI16" /* High 16 bit */,
  6: "R_MIPS_LO16" /* Low 16 bit */,
  7: "R_MIPS_GPREL16" /* GP relative 16 bit */,
  8: "R_MIPS_LITERAL" /* 16 bit literal entry */,
  9: "R_MIPS_GOT16" /* 16 bit GOT entry */,
  10: "R_MIPS_PC16" /* PC relative 16 bit */,
  11: "R_MIPS_CALL16" /* 16 bit GOT entry for function */,
  12: "R_MIPS_GPREL32" /* GP relative 32 bit */,
  16: "R_MIPS_SHIFT5",
  17: "R_MIPS_SHIFT6",
  18: "R_MIPS_64",
  19: "R_MIPS_GOT_DISP",
  20: "R_MIPS_GOT_PAGE",
  21: "R_MIPS_GOT_OFST",
  22: "R_MIPS_GOT_HI16",
  23: "R_MIPS_GOT_LO16",
  24: "R_MIPS_SUB",
  25: "R_MIPS_INSERT_A",
  26: "R_MIPS_INSERT_B",
  27: "R_MIPS_DELETE",
  28: "R_MIPS_HIGHER",
  29: "R_MIPS_HIGHEST",
  30: "R_MIPS_CALL_HI16",
  31: "R_MIPS_CALL_LO16",
  32: "R_MIPS_SCN_DISP",
  33: "R_MIPS_REL16",
  34: "R_MIPS_ADD_IMMEDIATE",
  35: "R_MIPS_PJUMP",
  36: "R_MIPS_RELGOT",
  37: "R_MIPS_JALR",
  38: "R_MIPS_TLS_DTPMOD32" /* Module number 32 bit */,
  39: "R_MIPS_TLS_DTPREL32" /* Module-relative offset 32 bit */,
  40: "R_MIPS_TLS_DTPMOD64" /* Module number 64 bit */,
  41: "R_MIPS_TLS_DTPREL64" /* Module-relative offset 64 bit */,
  42: "R_MIPS_TLS_GD" /* 16 bit GOT offset for GD */,
  43: "R_MIPS_TLS_LDM" /* 16 bit GOT offset for LDM */,
  44: "R_MIPS_TLS_DTPREL_HI16" /* Module-relative offset, high 16 bits */,
  45: "R_MIPS_TLS_DTPREL_LO16" /* Module-relative offset, low 16 bits */,
  46: "R_MIPS_TLS_GOTTPREL" /* 16 bit GOT offset for IE */,
  47: "R_MIPS_TLS_TPREL32" /* TP-relative offset, 32 bit */,
  48: "R_MIPS_TLS_TPREL64" /* TP-relative offset, 64 bit */,
  49: "R_MIPS_TLS_TPREL_HI16" /* TP-relative offset, high 16 bits */,
  50: "R_MIPS_TLS_TPREL_LO16" /* TP-relative offset, low 16 bits */,
  51: "R_MIPS_GLOB_DAT",
  126: "R_MIPS_COPY",
  127: "R_MIPS_JUMP_SLOT",
  128: "R_MIPS_NUM,",
};
export const HPPA_TypeMap: DictionaryType = {
  0: "R_PARISC_NONE" /* No reloc.  */,
  1: "R_PARISC_DIR32" /* Direct 32-bit reference.  */,
  2: "R_PARISC_DIR21L" /* Left 21 bits of eff. address.  */,
  3: "R_PARISC_DIR17R" /* Right 17 bits of eff. address.  */,
  4: "R_PARISC_DIR17F" /* 17 bits of eff. address.  */,
  6: "R_PARISC_DIR14R" /* Right 14 bits of eff. address.  */,
  9: "R_PARISC_PCREL32" /* 32-bit rel. address.  */,
  10: "R_PARISC_PCREL21L" /* Left 21 bits of rel. address.  */,
  11: "R_PARISC_PCREL17R" /* Right 17 bits of rel. address.  */,
  12: "R_PARISC_PCREL17F" /* 17 bits of rel. address.  */,
  14: "R_PARISC_PCREL14R" /* Right 14 bits of rel. address.  */,
  18: "R_PARISC_DPREL21L" /* Left 21 bits of rel. address.  */,
  22: "R_PARISC_DPREL14R" /* Right 14 bits of rel. address.  */,
  26: "R_PARISC_GPREL21L" /* GP-relative, left 21 bits.  */,
  30: "R_PARISC_GPREL14R" /* GP-relative, right 14 bits.  */,
  34: "R_PARISC_LTOFF21L" /* LT-relative, left 21 bits.  */,
  38: "R_PARISC_LTOFF14R" /* LT-relative, right 14 bits.  */,
  41: "R_PARISC_SECREL32" /* 32 bits section rel. address.  */,
  48: "R_PARISC_SEGBASE" /* No relocation, set segment base.  */,
  49: "R_PARISC_SEGREL32" /* 32 bits segment rel. address.  */,
  50: "R_PARISC_PLTOFF21L" /* PLT rel. address, left 21 bits.  */,
  54: "R_PARISC_PLTOFF14R" /* PLT rel. address, right 14 bits.  */,
  57: "R_PARISC_LTOFF_FPTR32" /* 32 bits LT-rel. function pointer. */,
  58: "R_PARISC_LTOFF_FPTR21L" /* LT-rel. fct ptr, left 21 bits. */,
  62: "R_PARISC_LTOFF_FPTR14R" /* LT-rel. fct ptr, right 14 bits. */,
  64: "R_PARISC_FPTR64" /* 64 bits function address.  */,
  65: "R_PARISC_PLABEL32" /* 32 bits function address.  */,
  66: "R_PARISC_PLABEL21L" /* Left 21 bits of fdesc address.  */,
  70: "R_PARISC_PLABEL14R" /* Right 14 bits of fdesc address.  */,
  72: "R_PARISC_PCREL64" /* 64 bits PC-rel. address.  */,
  74: "R_PARISC_PCREL22F" /* 22 bits PC-rel. address.  */,
  75: "R_PARISC_PCREL14WR" /* PC-rel. address, right 14 bits.  */,
  76: "R_PARISC_PCREL14DR" /* PC rel. address, right 14 bits.  */,
  77: "R_PARISC_PCREL16F" /* 16 bits PC-rel. address.  */,
  78: "R_PARISC_PCREL16WF" /* 16 bits PC-rel. address.  */,
  79: "R_PARISC_PCREL16DF" /* 16 bits PC-rel. address.  */,
  80: "R_PARISC_DIR64" /* 64 bits of eff. address.  */,
  83: "R_PARISC_DIR14WR" /* 14 bits of eff. address.  */,
  84: "R_PARISC_DIR14DR" /* 14 bits of eff. address.  */,
  85: "R_PARISC_DIR16F" /* 16 bits of eff. address.  */,
  86: "R_PARISC_DIR16WF" /* 16 bits of eff. address.  */,
  87: "R_PARISC_DIR16DF" /* 16 bits of eff. address.  */,
  88: "R_PARISC_GPREL64" /* 64 bits of GP-rel. address.  */,
  91: "R_PARISC_GPREL14WR" /* GP-rel. address, right 14 bits.  */,
  92: "R_PARISC_GPREL14DR" /* GP-rel. address, right 14 bits.  */,
  93: "R_PARISC_GPREL16F" /* 16 bits GP-rel. address.  */,
  94: "R_PARISC_GPREL16WF" /* 16 bits GP-rel. address.  */,
  95: "R_PARISC_GPREL16DF" /* 16 bits GP-rel. address.  */,
  96: "R_PARISC_LTOFF64" /* 64 bits LT-rel. address.  */,
  99: "R_PARISC_LTOFF14WR" /* LT-rel. address, right 14 bits.  */,
  100: "R_PARISC_LTOFF14DR" /* LT-rel. address, right 14 bits.  */,
  101: "R_PARISC_LTOFF16F" /* 16 bits LT-rel. address.  */,
  102: "R_PARISC_LTOFF16WF" /* 16 bits LT-rel. address.  */,
  103: "R_PARISC_LTOFF16DF" /* 16 bits LT-rel. address.  */,
  104: "R_PARISC_SECREL64" /* 64 bits section rel. address.  */,
  112: "R_PARISC_SEGREL64" /* 64 bits segment rel. address.  */,
  115: "R_PARISC_PLTOFF14WR" /* PLT-rel. address, right 14 bits.  */,
  116: "R_PARISC_PLTOFF14DR" /* PLT-rel. address, right 14 bits.  */,
  117: "R_PARISC_PLTOFF16F" /* 16 bits LT-rel. address.  */,
  118: "R_PARISC_PLTOFF16WF" /* 16 bits PLT-rel. address.  */,
  119: "R_PARISC_PLTOFF16DF" /* 16 bits PLT-rel. address.  */,
  120: "R_PARISC_LTOFF_FPTR64" /* 64 bits LT-rel. function ptr.  */,
  123: "R_PARISC_LTOFF_FPTR14WR" /* LT-rel. fct. ptr., right 14 bits. */,
  124: "R_PARISC_LTOFF_FPTR14DR" /* LT-rel. fct. ptr., right 14 bits. */,
  125: "R_PARISC_LTOFF_FPTR16F" /* 16 bits LT-rel. function ptr.  */,
  126: "R_PARISC_LTOFF_FPTR16WF" /* 16 bits LT-rel. function ptr.  */,
  127: "R_PARISC_LTOFF_FPTR16DF" /* 16 bits LT-rel. function ptr.  */,
  128: "R_PARISC_LORESERVE" + "R_PARISC_COPY" /* Copy relocation.  */,
  129: "R_PARISC_IPLT" /* Dynamic reloc, imported PLT */,
  130: "R_PARISC_EPLT" /* Dynamic reloc, exported PLT */,
  153: "R_PARISC_TPREL32" /* 32 bits TP-rel. address.  */,
  154: "R_PARISC_TPREL21L" /* TP-rel. address, left 21 bits.  */,
  158: "R_PARISC_TPREL14R" /* TP-rel. address, right 14 bits.  */,
  162: "R_PARISC_LTOFF_TP21L" /* LT-TP-rel. address, left 21 bits. */,
  166: "R_PARISC_LTOFF_TP14R" /* LT-TP-rel. address, right 14 bits.*/,
  167: "R_PARISC_LTOFF_TP14F" /* 14 bits LT-TP-rel. address.  */,
  216: "R_PARISC_TPREL64" /* 64 bits TP-rel. address.  */,
  219: "R_PARISC_TPREL14WR" /* TP-rel. address, right 14 bits.  */,
  220: "R_PARISC_TPREL14DR" /* TP-rel. address, right 14 bits.  */,
  221: "R_PARISC_TPREL16F" /* 16 bits TP-rel. address.  */,
  222: "R_PARISC_TPREL16WF" /* 16 bits TP-rel. address.  */,
  223: "R_PARISC_TPREL16DF" /* 16 bits TP-rel. address.  */,
  224: "R_PARISC_LTOFF_TP64" /* 64 bits LT-TP-rel. address.  */,
  227: "R_PARISC_LTOFF_TP14WR" /* LT-TP-rel. address, right 14 bits.*/,
  228: "R_PARISC_LTOFF_TP14DR" /* LT-TP-rel. address, right 14 bits.*/,
  229: "R_PARISC_LTOFF_TP16F" /* 16 bits LT-TP-rel. address.  */,
  230: "R_PARISC_LTOFF_TP16WF" /* 16 bits LT-TP-rel. address.  */,
  231: "R_PARISC_LTOFF_TP16DF" /* 16 bits LT-TP-rel. address.  */,
  232: "R_PARISC_GNU_VTENTRY",
  233: "R_PARISC_GNU_VTINHERIT",
  234: "R_PARISC_TLS_GD21L" /* GD 21-bit left.  */,
  235: "R_PARISC_TLS_GD14R" /* GD 14-bit right.  */,
  236: "R_PARISC_TLS_GDCALL" /* GD call to __t_g_a.  */,
  237: "R_PARISC_TLS_LDM21L" /* LD module 21-bit left.  */,
  238: "R_PARISC_TLS_LDM14R" /* LD module 14-bit right.  */,
  239: "R_PARISC_TLS_LDMCALL" /* LD module call to __t_g_a.  */,
  240: "R_PARISC_TLS_LDO21L" /* LD offset 21-bit left.  */,
  241: "R_PARISC_TLS_LDO14R" /* LD offset 14-bit right.  */,
  242: "R_PARISC_TLS_DTPMOD32" /* DTP module 32-bit.  */,
  243: "R_PARISC_TLS_DTPMOD64" /* DTP module 64-bit.  */,
  244: "R_PARISC_TLS_DTPOFF32" /* DTP offset 32-bit.  */,
  245: "R_PARISC_TLS_DTPOFF64" /* DTP offset 32-bit.  */,
  255: "R_PARISC_HIRESERVE",
};
export const ALPHA_TypeMap: DictionaryType = {
  0: "R_ALPHA_NONE" /* No reloc */,
  1: "R_ALPHA_REFLONG" /* Direct 32 bit */,
  2: "R_ALPHA_REFQUAD" /* Direct 64 bit */,
  3: "R_ALPHA_GPREL32" /* GP relative 32 bit */,
  4: "R_ALPHA_LITERAL" /* GP relative 16 bit w/optimization */,
  5: "R_ALPHA_LITUSE" /* Optimization hint for LITERAL */,
  6: "R_ALPHA_GPDISP" /* Add displacement to GP */,
  7: "R_ALPHA_BRADDR" /* PC+4 relative 23 bit shifted */,
  8: "R_ALPHA_HINT" /* PC+4 relative 16 bit shifted */,
  9: "R_ALPHA_SREL16" /* PC relative 16 bit */,
  10: "R_ALPHA_SREL32" /* PC relative 32 bit */,
  11: "R_ALPHA_SREL64" /* PC relative 64 bit */,
  17: "R_ALPHA_GPRELHIGH" /* GP relative 32 bit, high 16 bits */,
  18: "R_ALPHA_GPRELLOW" /* GP relative 32 bit, low 16 bits */,
  19: "R_ALPHA_GPREL16" /* GP relative 16 bit */,
  24: "R_ALPHA_COPY" /* Copy symbol at runtime */,
  25: "R_ALPHA_GLOB_DAT" /* Create GOT entry */,
  26: "R_ALPHA_JMP_SLOT" /* Create PLT entry */,
  27: "R_ALPHA_RELATIVE" /* Adjust by program base */,
  28: "R_ALPHA_TLS_GD_HI",
  29: "R_ALPHA_TLSGD",
  30: "R_ALPHA_TLS_LDM",
  31: "R_ALPHA_DTPMOD64",
  32: "R_ALPHA_GOTDTPREL",
  33: "R_ALPHA_DTPREL64",
  34: "R_ALPHA_DTPRELHI",
  35: "R_ALPHA_DTPRELLO",
  36: "R_ALPHA_DTPREL16",
  37: "R_ALPHA_GOTTPREL",
  38: "R_ALPHA_TPREL64",
  39: "R_ALPHA_TPRELHI",
  40: "R_ALPHA_TPRELLO",
  41: "R_ALPHA_TPREL16",
  46: "R_ALPHA_NUM",
};
export const AArch64_TypeMap: DictionaryType = {
  0: "R_AARCH64_NONE" /* No relocation.  */,
  /* ILP32 AArch64 relocs.  */
  1: "R_AARCH64_P32_ABS32" /* Direct 32 bit.  */,
  180: "R_AARCH64_P32_COPY" /* Copy symbol at runtime.  */,
  181: "R_AARCH64_P32_GLOB_DAT" /* Create GOT entry.  */,
  182: "R_AARCH64_P32_JUMP_SLOT" /* Create PLT entry.  */,
  183: "R_AARCH64_P32_RELATIVE" /* Adjust by program base.  */,
  184: "R_AARCH64_P32_TLS_DTPMOD" /* Module number, 32 bit.  */,
  185: "R_AARCH64_P32_TLS_DTPREL" /* Module-relative offset, 32 bit.  */,
  186: "R_AARCH64_P32_TLS_TPREL" /* TP-relative offset, 32 bit.  */,
  187: "R_AARCH64_P32_TLSDESC" /* TLS Descriptor.  */,
  188: "R_AARCH64_P32_IRELATIVE" /* STT_GNU_IFUNC relocation. */,
  /* LP64 AArch64 relocs.  */
  257: "R_AARCH64_ABS64" /* Direct 64 bit. */,
  258: "R_AARCH64_ABS32" /* Direct 32 bit.  */,
  259: "R_AARCH64_ABS16" /* Direct 16-bit.  */,
  260: "R_AARCH64_PREL64" /* PC-relative 64-bit.	*/,
  261: "R_AARCH64_PREL32" /* PC-relative 32-bit.	*/,
  262: "R_AARCH64_PREL16" /* PC-relative 16-bit.	*/,
  263: "R_AARCH64_MOVW_UABS_G0" /* Dir. MOVZ imm. from bits 15:0.  */,
  264: "R_AARCH64_MOVW_UABS_G0_NC" /* Likewise for MOVK; no check.  */,
  265: "R_AARCH64_MOVW_UABS_G1" /* Dir. MOVZ imm. from bits 31:16.  */,
  266: "R_AARCH64_MOVW_UABS_G1_NC" /* Likewise for MOVK; no check.  */,
  267: "R_AARCH64_MOVW_UABS_G2" /* Dir. MOVZ imm. from bits 47:32.  */,
  268: "R_AARCH64_MOVW_UABS_G2_NC" /* Likewise for MOVK; no check.  */,
  269: "R_AARCH64_MOVW_UABS_G3" /* Dir. MOV{K,Z} imm. from 63:48.  */,
  270: "R_AARCH64_MOVW_SABS_G0" /* Dir. MOV{N,Z} imm. from 15:0.  */,
  271: "R_AARCH64_MOVW_SABS_G1" /* Dir. MOV{N,Z} imm. from 31:16.  */,
  272: "R_AARCH64_MOVW_SABS_G2" /* Dir. MOV{N,Z} imm. from 47:32.  */,
  273: "R_AARCH64_LD_PREL_LO19" /* PC-rel. LD imm. from bits 20:2.  */,
  274: "R_AARCH64_ADR_PREL_LO21" /* PC-rel. ADR imm. from bits 20:0.  */,
  275: "R_AARCH64_ADR_PREL_PG_HI21" /* Page-rel. ADRP imm. from 32:12.  */,
  276: "R_AARCH64_ADR_PREL_PG_HI21_NC" /* Likewise; no overflow check.  */,
  277: "R_AARCH64_ADD_ABS_LO12_NC" /* Dir. ADD imm. from bits 11:0.  */,
  278: "R_AARCH64_LDST8_ABS_LO12_NC" /* Likewise for LD/ST; no check. */,
  279: "R_AARCH64_TSTBR14" /* PC-rel. TBZ/TBNZ imm. from 15:2.  */,
  280: "R_AARCH64_CONDBR19" /* PC-rel. cond. br. imm. from 20:2. */,
  282: "R_AARCH64_JUMP26" /* PC-rel. B imm. from bits 27:2.  */,
  283: "R_AARCH64_CALL26" /* Likewise for CALL.  */,
  284: "R_AARCH64_LDST16_ABS_LO12_NC" /* Dir. ADD imm. from bits 11:1.  */,
  285: "R_AARCH64_LDST32_ABS_LO12_NC" /* Likewise for bits 11:2.  */,
  286: "R_AARCH64_LDST64_ABS_LO12_NC" /* Likewise for bits 11:3.  */,
  287: "R_AARCH64_MOVW_PREL_G0" /* PC-rel. MOV{N,Z} imm. from 15:0.  */,
  288: "R_AARCH64_MOVW_PREL_G0_NC" /* Likewise for MOVK; no check.  */,
  289: "R_AARCH64_MOVW_PREL_G1" /* PC-rel. MOV{N,Z} imm. from 31:16. */,
  290: "R_AARCH64_MOVW_PREL_G1_NC" /* Likewise for MOVK; no check.  */,
  291: "R_AARCH64_MOVW_PREL_G2" /* PC-rel. MOV{N,Z} imm. from 47:32. */,
  292: "R_AARCH64_MOVW_PREL_G2_NC" /* Likewise for MOVK; no check.  */,
  293: "R_AARCH64_MOVW_PREL_G3" /* PC-rel. MOV{N,Z} imm. from 63:48. */,
  299: "R_AARCH64_LDST128_ABS_LO12_NC" /* Dir. ADD imm. from bits 11:4.  */,
  300: "R_AARCH64_MOVW_GOTOFF_G0" /* GOT-rel. off. MOV{N,Z} imm. 15:0. */,
  301: "R_AARCH64_MOVW_GOTOFF_G0_NC" /* Likewise for MOVK; no check.  */,
  302: "R_AARCH64_MOVW_GOTOFF_G1" /* GOT-rel. o. MOV{N,Z} imm. 31:16.  */,
  303: "R_AARCH64_MOVW_GOTOFF_G1_NC" /* Likewise for MOVK; no check.  */,
  304: "R_AARCH64_MOVW_GOTOFF_G2" /* GOT-rel. o. MOV{N,Z} imm. 47:32.  */,
  305: "R_AARCH64_MOVW_GOTOFF_G2_NC" /* Likewise for MOVK; no check.  */,
  306: "R_AARCH64_MOVW_GOTOFF_G3" /* GOT-rel. o. MOV{N,Z} imm. 63:48.  */,
  307: "R_AARCH64_GOTREL64" /* GOT-relative 64-bit.  */,
  308: "R_AARCH64_GOTREL32" /* GOT-relative 32-bit.  */,
  309: "R_AARCH64_GOT_LD_PREL19" /* PC-rel. GOT off. load imm. 20:2.  */,
  310: "R_AARCH64_LD64_GOTOFF_LO15" /* GOT-rel. off. LD/ST imm. 14:3.  */,
  311: "R_AARCH64_ADR_GOT_PAGE" /* P-page-rel. GOT off. ADRP 32:12.  */,
  312: "R_AARCH64_LD64_GOT_LO12_NC" /* Dir. GOT off. LD/ST imm. 11:3.  */,
  313: "R_AARCH64_LD64_GOTPAGE_LO15" /* GOT-page-rel. GOT off. LD/ST 14:3 */,
  512: "R_AARCH64_TLSGD_ADR_PREL21" /* PC-relative ADR imm. 20:0.  */,
  513: "R_AARCH64_TLSGD_ADR_PAGE21" /* page-rel. ADRP imm. 32:12.  */,
  514: "R_AARCH64_TLSGD_ADD_LO12_NC" /* direct ADD imm. from 11:0.  */,
  515: "R_AARCH64_TLSGD_MOVW_G1" /* GOT-rel. MOV{N,Z} 31:16.  */,
  516: "R_AARCH64_TLSGD_MOVW_G0_NC" /* GOT-rel. MOVK imm. 15:0.  */,
  517: "R_AARCH64_TLSLD_ADR_PREL21" /* Like 512; local dynamic model.  */,
  518: "R_AARCH64_TLSLD_ADR_PAGE21" /* Like 513; local dynamic model.  */,
  519: "R_AARCH64_TLSLD_ADD_LO12_NC" /* Like 514; local dynamic model.  */,
  520: "R_AARCH64_TLSLD_MOVW_G1" /* Like 515; local dynamic model.  */,
  521: "R_AARCH64_TLSLD_MOVW_G0_NC" /* Like 516; local dynamic model.  */,
  522: "R_AARCH64_TLSLD_LD_PREL19" /* TLS PC-rel. load imm. 20:2.  */,
  523: "R_AARCH64_TLSLD_MOVW_DTPREL_G2" /* TLS DTP-rel. MOV{N,Z} 47:32.  */,
  524: "R_AARCH64_TLSLD_MOVW_DTPREL_G1" /* TLS DTP-rel. MOV{N,Z} 31:16.  */,
  525: "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC" /* Likewise; MOVK; no check.  */,
  526: "R_AARCH64_TLSLD_MOVW_DTPREL_G0" /* TLS DTP-rel. MOV{N,Z} 15:0.  */,
  527: "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC" /* Likewise; MOVK; no check.  */,
  528: "R_AARCH64_TLSLD_ADD_DTPREL_HI12" /* DTP-rel. ADD imm. from 23:12. */,
  529: "R_AARCH64_TLSLD_ADD_DTPREL_LO12" /* DTP-rel. ADD imm. from 11:0.  */,
  530: "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC" /* Likewise; no ovfl. check.  */,
  531: "R_AARCH64_TLSLD_LDST8_DTPREL_LO12" /* DTP-rel. LD/ST imm. 11:0.  */,
  532: "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC" /* Likewise; no check.  */,
  533: "R_AARCH64_TLSLD_LDST16_DTPREL_LO12" /* DTP-rel. LD/ST imm. 11:1.  */,
  534: "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC" /* Likewise; no check.  */,
  535: "R_AARCH64_TLSLD_LDST32_DTPREL_LO12" /* DTP-rel. LD/ST imm. 11:2.  */,
  536: "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC" /* Likewise; no check.  */,
  537: "R_AARCH64_TLSLD_LDST64_DTPREL_LO12" /* DTP-rel. LD/ST imm. 11:3.  */,
  538: "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC" /* Likewise; no check.  */,
  539: "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1" /* GOT-rel. MOV{N,Z} 31:16.  */,
  540: "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC" /* GOT-rel. MOVK 15:0.  */,
  541: "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21" /* Page-rel. ADRP 32:12.  */,
  542: "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC" /* Direct LD off. 11:3.  */,
  543: "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19" /* PC-rel. load imm. 20:2.  */,
  544: "R_AARCH64_TLSLE_MOVW_TPREL_G2" /* TLS TP-rel. MOV{N,Z} 47:32.  */,
  545: "R_AARCH64_TLSLE_MOVW_TPREL_G1" /* TLS TP-rel. MOV{N,Z} 31:16.  */,
  546: "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC" /* Likewise; MOVK; no check.  */,
  547: "R_AARCH64_TLSLE_MOVW_TPREL_G0" /* TLS TP-rel. MOV{N,Z} 15:0.  */,
  548: "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC" /* Likewise; MOVK; no check.  */,
  549: "R_AARCH64_TLSLE_ADD_TPREL_HI12" /* TP-rel. ADD imm. 23:12.  */,
  550: "R_AARCH64_TLSLE_ADD_TPREL_LO12" /* TP-rel. ADD imm. 11:0.  */,
  551: "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC" /* Likewise; no ovfl. check.  */,
  552: "R_AARCH64_TLSLE_LDST8_TPREL_LO12" /* TP-rel. LD/ST off. 11:0.  */,
  553: "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC" /* Likewise; no ovfl. check. */,
  554: "R_AARCH64_TLSLE_LDST16_TPREL_LO12" /* TP-rel. LD/ST off. 11:1.  */,
  555: "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC" /* Likewise; no check.  */,
  556: "R_AARCH64_TLSLE_LDST32_TPREL_LO12" /* TP-rel. LD/ST off. 11:2.  */,
  557: "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC" /* Likewise; no check.  */,
  558: "R_AARCH64_TLSLE_LDST64_TPREL_LO12" /* TP-rel. LD/ST off. 11:3.  */,
  559: "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC" /* Likewise; no check.  */,
  560: "R_AARCH64_TLSDESC_LD_PREL19" /* PC-rel. load immediate 20:2.  */,
  561: "R_AARCH64_TLSDESC_ADR_PREL21" /* PC-rel. ADR immediate 20:0.  */,
  562: "R_AARCH64_TLSDESC_ADR_PAGE21" /* Page-rel. ADRP imm. 32:12.  */,
  563: "R_AARCH64_TLSDESC_LD64_LO12" /* Direct LD off. from 11:3.  */,
  564: "R_AARCH64_TLSDESC_ADD_LO12" /* Direct ADD imm. from 11:0.  */,
  565: "R_AARCH64_TLSDESC_OFF_G1" /* GOT-rel. MOV{N,Z} imm. 31:16.  */,
  566: "R_AARCH64_TLSDESC_OFF_G0_NC" /* GOT-rel. MOVK imm. 15:0; no ck.  */,
  567: "R_AARCH64_TLSDESC_LDR" /* Relax LDR.  */,
  568: "R_AARCH64_TLSDESC_ADD" /* Relax ADD.  */,
  569: "R_AARCH64_TLSDESC_CALL" /* Relax BLR.  */,
  570: "R_AARCH64_TLSLE_LDST128_TPREL_LO12" /* TP-rel. LD/ST off. 11:4.  */,
  571: "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC" /* Likewise; no check.  */,
  572: "R_AARCH64_TLSLD_LDST128_DTPREL_LO12" /* DTP-rel. LD/ST imm. 11:4. */,
  573: "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC" /* Likewise; no check.  */,
  1024: "R_AARCH64_COPY" /* Copy symbol at runtime.  */,
  1025: "R_AARCH64_GLOB_DAT" /* Create GOT entry.  */,
  1026: "R_AARCH64_JUMP_SLOT" /* Create PLT entry.  */,
  1027: "R_AARCH64_RELATIVE" /* Adjust by program base.  */,
  1028: "R_AARCH64_TLS_DTPMOD" /* Module number, 64 bit.  */,
  1029: "R_AARCH64_TLS_DTPREL" /* Module-relative offset, 64 bit.  */,
  1030: "R_AARCH64_TLS_TPREL" /* TP-relative offset, 64 bit.  */,
  1031: "R_AARCH64_TLSDESC" /* TLS Descriptor.  */,
  1032: "R_AARCH64_IRELATIVE" /* STT_GNU_IFUNC relocation.  */,
};
export const SH_TypeMap: DictionaryType = {
  0: "R_SH_NONE",
  1: "R_SH_DIR32",
  2: "R_SH_REL32",
  3: "R_SH_DIR8WPN",
  4: "R_SH_IND12W",
  5: "R_SH_DIR8WPL",
  6: "R_SH_DIR8WPZ",
  7: "R_SH_DIR8BP",
  8: "R_SH_DIR8W",
  9: "R_SH_DIR8L",
  25: "R_SH_SWITCH16",
  26: "R_SH_SWITCH32",
  27: "R_SH_USES",
  28: "R_SH_COUNT",
  29: "R_SH_ALIGN",
  30: "R_SH_CODE",
  31: "R_SH_DATA",
  32: "R_SH_LABEL",
  33: "R_SH_SWITCH8",
  34: "R_SH_GNU_VTINHERIT",
  35: "R_SH_GNU_VTENTRY",
  144: "R_SH_TLS_GD_32",
  145: "R_SH_TLS_LD_32",
  146: "R_SH_TLS_LDO_32",
  147: "R_SH_TLS_IE_32",
  148: "R_SH_TLS_LE_32",
  149: "R_SH_TLS_DTPMOD32",
  150: "R_SH_TLS_DTPOFF32",
  151: "R_SH_TLS_TPOFF32",
  160: "R_SH_GOT32",
  161: "R_SH_PLT32",
  162: "R_SH_COPY",
  163: "R_SH_GLOB_DAT",
  164: "R_SH_JMP_SLOT",
  165: "R_SH_RELATIVE",
  166: "R_SH_GOTOFF",
  167: "R_SH_GOTPC",
  256: "R_SH_NUM",
};
export const M32R_TypeMap: DictionaryType = {
  0: "R_M32R_NONE" /* No reloc. */,
  1: "R_M32R_16" /* Direct 16 bit. */,
  2: "R_M32R_32" /* Direct 32 bit. */,
  3: "R_M32R_24" /* Direct 24 bit. */,
  4: "R_M32R_10_PCREL" /* PC relative 10 bit shifted. */,
  5: "R_M32R_18_PCREL" /* PC relative 18 bit shifted. */,
  6: "R_M32R_26_PCREL" /* PC relative 26 bit shifted. */,
  7: "R_M32R_HI16_ULO" /* High 16 bit with unsigned low. */,
  8: "R_M32R_HI16_SLO" /* High 16 bit with signed low. */,
  9: "R_M32R_LO16" /* Low 16 bit. */,
  10: "R_M32R_SDA16" /* 16 bit offset in SDA. */,
  11: "R_M32R_GNU_VTINHERIT",
  12: "R_M32R_GNU_VTENTRY",
  /* M32R relocs use SHT_RELA.  */
  33: "R_M32R_16_RELA" /* Direct 16 bit. */,
  34: "R_M32R_32_RELA" /* Direct 32 bit. */,
  35: "R_M32R_24_RELA" /* Direct 24 bit. */,
  36: "R_M32R_10_PCREL_RELA" /* PC relative 10 bit shifted. */,
  37: "R_M32R_18_PCREL_RELA" /* PC relative 18 bit shifted. */,
  38: "R_M32R_26_PCREL_RELA" /* PC relative 26 bit shifted. */,
  39: "R_M32R_HI16_ULO_RELA" /* High 16 bit with unsigned low */,
  40: "R_M32R_HI16_SLO_RELA" /* High 16 bit with signed low */,
  41: "R_M32R_LO16_RELA" /* Low 16 bit */,
  42: "R_M32R_SDA16_RELA" /* 16 bit offset in SDA */,
  43: "R_M32R_RELA_GNU_VTINHERIT",
  44: "R_M32R_RELA_GNU_VTENTRY",
  45: "R_M32R_REL32" /* PC relative 32 bit.  */,
  48: "R_M32R_GOT24" /* 24 bit GOT entry */,
  49: "R_M32R_26_PLTREL" /* 26 bit PC relative to PLT shifted */,
  50: "R_M32R_COPY" /* Copy symbol at runtime */,
  51: "R_M32R_GLOB_DAT" /* Create GOT entry */,
  52: "R_M32R_JMP_SLOT" /* Create PLT entry */,
  53: "R_M32R_RELATIVE" /* Adjust by program base */,
  54: "R_M32R_GOTOFF" /* 24 bit offset to GOT */,
  55: "R_M32R_GOTPC24" /* 24 bit PC relative offset to GOT */,
  56: "R_M32R_GOT16_HI_ULO" /* High 16 bit GOT entry with unsigned low */,
  57: "R_M32R_GOT16_HI_SLO" /* High 16 bit GOT entry with signed low */,
  58: "R_M32R_GOT16_LO" /* Low 16 bit GOT entry */,
  59: "R_M32R_GOTPC_HI_ULO" /* High 16 bit PC relative offset to GOT with unsigned low */,
  60: "R_M32R_GOTPC_HI_SLO" /* High 16 bit PC relative offset to GOT with signed low */,
  61: "R_M32R_GOTPC_LO" /* Low 16 bit PC relative offset to GOT */,
  62: "R_M32R_GOTOFF_HI_ULO" /* High 16 bit offset to GOT with unsigned low */,
  63: "R_M32R_GOTOFF_HI_SLO" /* High 16 bit offset to GOT with signed low */,
  64: "R_M32R_GOTOFF_LO" /* Low 16 bit offset to GOT */,
  256: "R_M32R_NUM" /* Keep this the last entry. */,
};
export const PPC_TypeMap: DictionaryType = {
  0: "R_PPC_NONE",
  1: "R_PPC_ADDR32" /* 32bit absolute address */,
  2: "R_PPC_ADDR24" /* 26bit address, 2 bits ignored.  */,
  3: "R_PPC_ADDR16" /* 16bit absolute address */,
  4: "R_PPC_ADDR16_LO" /* lower 16bit of absolute address */,
  5: "R_PPC_ADDR16_HI" /* high 16bit of absolute address */,
  6: "R_PPC_ADDR16_HA" /* adjusted high 16bit */,
  7: "R_PPC_ADDR14" /* 16bit address, 2 bits ignored */,
  8: "R_PPC_ADDR14_BRTAKEN",
  9: "R_PPC_ADDR14_BRNTAKEN",
  10: "R_PPC_REL24" /* PC relative 26 bit */,
  11: "R_PPC_REL14" /* PC relative 16 bit */,
  12: "R_PPC_REL14_BRTAKEN",
  13: "R_PPC_REL14_BRNTAKEN",
  14: "R_PPC_GOT16",
  15: "R_PPC_GOT16_LO",
  16: "R_PPC_GOT16_HI",
  17: "R_PPC_GOT16_HA",
  18: "R_PPC_PLTREL24",
  19: "R_PPC_COPY",
  20: "R_PPC_GLOB_DAT",
  21: "R_PPC_JMP_SLOT",
  22: "R_PPC_RELATIVE",
  23: "R_PPC_LOCAL24PC",
  24: "R_PPC_UADDR32",
  25: "R_PPC_UADDR16",
  26: "R_PPC_REL32",
  27: "R_PPC_PLT32",
  28: "R_PPC_PLTREL32",
  29: "R_PPC_PLT16_LO",
  30: "R_PPC_PLT16_HI",
  31: "R_PPC_PLT16_HA",
  32: "R_PPC_SDAREL16",
  33: "R_PPC_SECTOFF",
  34: "R_PPC_SECTOFF_LO",
  35: "R_PPC_SECTOFF_HI",
  36: "R_PPC_SECTOFF_HA",
  /* PowerPC relocations defined for the TLS access ABI.  */
  67: "R_PPC_TLS" /* none	(sym+add)@tls */,
  68: "R_PPC_DTPMOD32" /* word32	(sym+add)@dtpmod */,
  69: "R_PPC_TPREL16" /* half16*	(sym+add)@tprel */,
  70: "R_PPC_TPREL16_LO" /* half16	(sym+add)@tprel@l */,
  71: "R_PPC_TPREL16_HI" /* half16	(sym+add)@tprel@h */,
  72: "R_PPC_TPREL16_HA" /* half16	(sym+add)@tprel@ha */,
  73: "R_PPC_TPREL32" /* word32	(sym+add)@tprel */,
  74: "R_PPC_DTPREL16" /* half16*	(sym+add)@dtprel */,
  75: "R_PPC_DTPREL16_LO" /* half16	(sym+add)@dtprel@l */,
  76: "R_PPC_DTPREL16_HI" /* half16	(sym+add)@dtprel@h */,
  77: "R_PPC_DTPREL16_HA" /* half16	(sym+add)@dtprel@ha */,
  78: "R_PPC_DTPREL32" /* word32	(sym+add)@dtprel */,
  79: "R_PPC_GOT_TLSGD16" /* half16*	(sym+add)@got@tlsgd */,
  80: "R_PPC_GOT_TLSGD16_LO" /* half16	(sym+add)@got@tlsgd@l */,
  81: "R_PPC_GOT_TLSGD16_HI" /* half16	(sym+add)@got@tlsgd@h */,
  82: "R_PPC_GOT_TLSGD16_HA" /* half16	(sym+add)@got@tlsgd@ha */,
  83: "R_PPC_GOT_TLSLD16" /* half16*	(sym+add)@got@tlsld */,
  84: "R_PPC_GOT_TLSLD16_LO" /* half16	(sym+add)@got@tlsld@l */,
  85: "R_PPC_GOT_TLSLD16_HI" /* half16	(sym+add)@got@tlsld@h */,
  86: "R_PPC_GOT_TLSLD16_HA" /* half16	(sym+add)@got@tlsld@ha */,
  87: "R_PPC_GOT_TPREL16" /* half16*	(sym+add)@got@tprel */,
  88: "R_PPC_GOT_TPREL16_LO" /* half16	(sym+add)@got@tprel@l */,
  89: "R_PPC_GOT_TPREL16_HI" /* half16	(sym+add)@got@tprel@h */,
  90: "R_PPC_GOT_TPREL16_HA" /* half16	(sym+add)@got@tprel@ha */,
  91: "R_PPC_GOT_DTPREL16" /* half16*	(sym+add)@got@dtprel */,
  92: "R_PPC_GOT_DTPREL16_LO" /* half16*	(sym+add)@got@dtprel@l */,
  93: "R_PPC_GOT_DTPREL16_HI" /* half16*	(sym+add)@got@dtprel@h */,
  94: "R_PPC_GOT_DTPREL16_HA" /* half16*	(sym+add)@got@dtprel@ha */,
  95: "R_PPC_TLSGD" /* none	(sym+add)@tlsgd */,
  96: "R_PPC_TLSLD" /* none	(sym+add)@tlsld */,
  /* The remaining relocs are from the Embedded ELF ABI, and are not in the SVR4 ELF ABI.  */
  101: "R_PPC_EMB_NADDR32",
  102: "R_PPC_EMB_NADDR16",
  103: "R_PPC_EMB_NADDR16_LO",
  104: "R_PPC_EMB_NADDR16_HI",
  105: "R_PPC_EMB_NADDR16_HA",
  106: "R_PPC_EMB_SDAI16",
  107: "R_PPC_EMB_SDA2I16",
  108: "R_PPC_EMB_SDA2REL",
  109: "R_PPC_EMB_SDA21" /* 16 bit offset in SDA */,
  110: "R_PPC_EMB_MRKREF",
  111: "R_PPC_EMB_RELSEC16",
  112: "R_PPC_EMB_RELST_LO",
  113: "R_PPC_EMB_RELST_HI",
  114: "R_PPC_EMB_RELST_HA",
  115: "R_PPC_EMB_BIT_FLD",
  116: "R_PPC_EMB_RELSDA" /* 16 bit relative offset in SDA */,
  /* Diab tool relocations.  */
  180: "R_PPC_DIAB_SDA21_LO" /* like EMB_SDA21, but lower 16 bit */,
  181: "R_PPC_DIAB_SDA21_HI" /* like EMB_SDA21, but high 16 bit */,
  182: "R_PPC_DIAB_SDA21_HA" /* like EMB_SDA21, adjusted high 16 */,
  183: "R_PPC_DIAB_RELSDA_LO" /* like EMB_RELSDA, but lower 16 bit */,
  184: "R_PPC_DIAB_RELSDA_HI" /* like EMB_RELSDA, but high 16 bit */,
  185: "R_PPC_DIAB_RELSDA_HA" /* like EMB_RELSDA, adjusted high 16 */,
  /* GNU extension to support local ifunc.  */
  248: "R_PPC_IRELATIVE",
  /* GNU relocs used in PIC code sequences.  */
  249: "R_PPC_REL16" /* half16   (sym+add-.) */,
  250: "R_PPC_REL16_LO" /* half16   (sym+add-.)@l */,
  251: "R_PPC_REL16_HI" /* half16   (sym+add-.)@h */,
  252: "R_PPC_REL16_HA" /* half16   (sym+add-.)@ha */,
  /* This is a phony reloc to handle any old fashioned TOC16 references that may still be in object files.  */
  255: "R_PPC_TOC16",
};
export const PPC64_TypeMap: DictionaryType = {
  0: "R_PPC64_NONE",
  1: "R_PPC64_ADDR32" /* 32bit absolute address */,
  2: "R_PPC64_ADDR24" /* 26bit address, word aligned */,
  3: "R_PPC64_ADDR16" /* 16bit absolute address */,
  4: "R_PPC64_ADDR16_LO" /* lower 16bits of address */,
  5: "R_PPC64_ADDR16_HI" /* high 16bits of address. */,
  6: "R_PPC64_ADDR16_HA" /* adjusted high 16bit */,
  7: "R_PPC64_ADDR14" /* 16bit address, word aligned */,
  8: "R_PPC64_ADDR14_BRTAKEN",
  9: "R_PPC64_ADDR14_BRNTAKEN",
  10: "R_PPC64_REL24" /* PC-rel. 26 bit, word aligned */,
  11: "R_PPC64_REL14" /* PC relative 16 bit */,
  12: "R_PPC64_REL14_BRTAKEN",
  13: "R_PPC64_REL14_BRNTAKEN",
  14: "R_PPC64_GOT16",
  15: "R_PPC64_GOT16_LO",
  16: "R_PPC64_GOT16_HI",
  17: "R_PPC64_GOT16_HA",
  19: "R_PPC64_COPY",
  20: "R_PPC64_GLOB_DAT",
  21: "R_PPC64_JMP_SLOT",
  22: "R_PPC64_RELATIVE",
  24: "R_PPC64_UADDR32",
  25: "R_PPC64_UADDR16",
  26: "R_PPC64_REL32",
  27: "R_PPC64_PLT32",
  28: "R_PPC64_PLTREL32",
  29: "R_PPC64_PLT16_LO",
  30: "R_PPC64_PLT16_HI",
  31: "R_PPC64_PLT16_HA",
  33: "R_PPC64_SECTOFF",
  34: "R_PPC64_SECTOFF_LO",
  35: "R_PPC64_SECTOFF_HI",
  36: "R_PPC64_SECTOFF_HA",
  37: "R_PPC64_ADDR30" /* word30 (S + A - P) >> 2 */,
  38: "R_PPC64_ADDR64" /* doubleword64 S + A */,
  39: "R_PPC64_ADDR16_HIGHER" /* half16 #higher(S + A) */,
  40: "R_PPC64_ADDR16_HIGHERA" /* half16 #highera(S + A) */,
  41: "R_PPC64_ADDR16_HIGHEST" /* half16 #highest(S + A) */,
  42: "R_PPC64_ADDR16_HIGHESTA" /* half16 #highesta(S + A) */,
  43: "R_PPC64_UADDR64" /* doubleword64 S + A */,
  44: "R_PPC64_REL64" /* doubleword64 S + A - P */,
  45: "R_PPC64_PLT64" /* doubleword64 L + A */,
  46: "R_PPC64_PLTREL64" /* doubleword64 L + A - P */,
  47: "R_PPC64_TOC16" /* half16* S + A - .TOC */,
  48: "R_PPC64_TOC16_LO" /* half16 #lo(S + A - .TOC.) */,
  49: "R_PPC64_TOC16_HI" /* half16 #hi(S + A - .TOC.) */,
  50: "R_PPC64_TOC16_HA" /* half16 #ha(S + A - .TOC.) */,
  51: "R_PPC64_TOC" /* doubleword64 .TOC */,
  52: "R_PPC64_PLTGOT16" /* half16* M + A */,
  53: "R_PPC64_PLTGOT16_LO" /* half16 #lo(M + A) */,
  54: "R_PPC64_PLTGOT16_HI" /* half16 #hi(M + A) */,
  55: "R_PPC64_PLTGOT16_HA" /* half16 #ha(M + A) */,
  56: "R_PPC64_ADDR16_DS" /* half16ds* (S + A) >> 2 */,
  57: "R_PPC64_ADDR16_LO_DS" /* half16ds  #lo(S + A) >> 2 */,
  58: "R_PPC64_GOT16_DS" /* half16ds* (G + A) >> 2 */,
  59: "R_PPC64_GOT16_LO_DS" /* half16ds  #lo(G + A) >> 2 */,
  60: "R_PPC64_PLT16_LO_DS" /* half16ds  #lo(L + A) >> 2 */,
  61: "R_PPC64_SECTOFF_DS" /* half16ds* (R + A) >> 2 */,
  62: "R_PPC64_SECTOFF_LO_DS" /* half16ds  #lo(R + A) >> 2 */,
  63: "R_PPC64_TOC16_DS" /* half16ds* (S + A - .TOC.) >> 2 */,
  64: "R_PPC64_TOC16_LO_DS" /* half16ds  #lo(S + A - .TOC.) >> 2 */,
  65: "R_PPC64_PLTGOT16_DS" /* half16ds* (M + A) >> 2 */,
  66: "R_PPC64_PLTGOT16_LO_DS" /* half16ds  #lo(M + A) >> 2 */,
  /* PowerPC64 relocations defined for the TLS access ABI.  */
  67: "R_PPC64_TLS" /* none	(sym+add)@tls */,
  68: "R_PPC64_DTPMOD64" /* doubleword64 (sym+add)@dtpmod */,
  69: "R_PPC64_TPREL16" /* half16*	(sym+add)@tprel */,
  70: "R_PPC64_TPREL16_LO" /* half16	(sym+add)@tprel@l */,
  71: "R_PPC64_TPREL16_HI" /* half16	(sym+add)@tprel@h */,
  72: "R_PPC64_TPREL16_HA" /* half16	(sym+add)@tprel@ha */,
  73: "R_PPC64_TPREL64" /* doubleword64 (sym+add)@tprel */,
  74: "R_PPC64_DTPREL16" /* half16*	(sym+add)@dtprel */,
  75: "R_PPC64_DTPREL16_LO" /* half16	(sym+add)@dtprel@l */,
  76: "R_PPC64_DTPREL16_HI" /* half16	(sym+add)@dtprel@h */,
  77: "R_PPC64_DTPREL16_HA" /* half16	(sym+add)@dtprel@ha */,
  78: "R_PPC64_DTPREL64" /* doubleword64 (sym+add)@dtprel */,
  79: "R_PPC64_GOT_TLSGD16" /* half16*	(sym+add)@got@tlsgd */,
  80: "R_PPC64_GOT_TLSGD16_LO" /* half16	(sym+add)@got@tlsgd@l */,
  81: "R_PPC64_GOT_TLSGD16_HI" /* half16	(sym+add)@got@tlsgd@h */,
  82: "R_PPC64_GOT_TLSGD16_HA" /* half16	(sym+add)@got@tlsgd@ha */,
  83: "R_PPC64_GOT_TLSLD16" /* half16*	(sym+add)@got@tlsld */,
  84: "R_PPC64_GOT_TLSLD16_LO" /* half16	(sym+add)@got@tlsld@l */,
  85: "R_PPC64_GOT_TLSLD16_HI" /* half16	(sym+add)@got@tlsld@h */,
  86: "R_PPC64_GOT_TLSLD16_HA" /* half16	(sym+add)@got@tlsld@ha */,
  87: "R_PPC64_GOT_TPREL16_DS" /* half16ds*	(sym+add)@got@tprel */,
  88: "R_PPC64_GOT_TPREL16_LO_DS" /* half16ds (sym+add)@got@tprel@l */,
  89: "R_PPC64_GOT_TPREL16_HI" /* half16	(sym+add)@got@tprel@h */,
  90: "R_PPC64_GOT_TPREL16_HA" /* half16	(sym+add)@got@tprel@ha */,
  91: "R_PPC64_GOT_DTPREL16_DS" /* half16ds*	(sym+add)@got@dtprel */,
  92: "R_PPC64_GOT_DTPREL16_LO_DS" /* half16ds (sym+add)@got@dtprel@l */,
  93: "R_PPC64_GOT_DTPREL16_HI" /* half16	(sym+add)@got@dtprel@h */,
  94: "R_PPC64_GOT_DTPREL16_HA" /* half16	(sym+add)@got@dtprel@ha */,
  95: "R_PPC64_TPREL16_DS" /* half16ds*	(sym+add)@tprel */,
  96: "R_PPC64_TPREL16_LO_DS" /* half16ds	(sym+add)@tprel@l */,
  97: "R_PPC64_TPREL16_HIGHER" /* half16	(sym+add)@tprel@higher */,
  98: "R_PPC64_TPREL16_HIGHERA" /* half16	(sym+add)@tprel@highera */,
  99: "R_PPC64_TPREL16_HIGHEST" /* half16	(sym+add)@tprel@highest */,
  100: "R_PPC64_TPREL16_HIGHESTA" /* half16	(sym+add)@tprel@highesta */,
  101: "R_PPC64_DTPREL16_DS" /* half16ds* (sym+add)@dtprel */,
  102: "R_PPC64_DTPREL16_LO_DS" /* half16ds	(sym+add)@dtprel@l */,
  103: "R_PPC64_DTPREL16_HIGHER" /* half16	(sym+add)@dtprel@higher */,
  104: "R_PPC64_DTPREL16_HIGHERA" /* half16	(sym+add)@dtprel@highera */,
  105: "R_PPC64_DTPREL16_HIGHEST" /* half16	(sym+add)@dtprel@highest */,
  106: "R_PPC64_DTPREL16_HIGHESTA" /* half16	(sym+add)@dtprel@highesta */,
  107: "R_PPC64_TLSGD" /* none	(sym+add)@tlsgd */,
  108: "R_PPC64_TLSLD" /* none	(sym+add)@tlsld */,
  109: "R_PPC64_TOCSAVE" /* none */,
  /* Added when HA and HI relocs were changed to report overflows.  */
  110: "R_PPC64_ADDR16_HIGH",
  111: "R_PPC64_ADDR16_HIGHA",
  112: "R_PPC64_TPREL16_HIGH",
  113: "R_PPC64_TPREL16_HIGHA",
  114: "R_PPC64_DTPREL16_HIGH",
  115: "R_PPC64_DTPREL16_HIGHA",
  /* GNU extension to support local ifunc.  */
  247: "R_PPC64_JMP_IREL",
  248: "R_PPC64_IRELATIVE",
  249: "R_PPC64_REL16" /* half16   (sym+add-.) */,
  250: "R_PPC64_REL16_LO" /* half16   (sym+add-.)@l */,
  251: "R_PPC64_REL16_HI" /* half16   (sym+add-.)@h */,
  252: "R_PPC64_REL16_HA" /* half16   (sym+add-.)@ha */,
};
export const IA64_TypeMap: DictionaryType = {
  0x00: "R_IA64_NONE" /* none */,
  0x21: "R_IA64_IMM14" /* symbol + addend, add imm14 */,
  0x22: "R_IA64_IMM22" /* symbol + addend, add imm22 */,
  0x23: "R_IA64_IMM64" /* symbol + addend, mov imm64 */,
  0x24: "R_IA64_DIR32MSB" /* symbol + addend, data4 MSB */,
  0x25: "R_IA64_DIR32LSB" /* symbol + addend, data4 LSB */,
  0x26: "R_IA64_DIR64MSB" /* symbol + addend, data8 MSB */,
  0x27: "R_IA64_DIR64LSB" /* symbol + addend, data8 LSB */,
  0x2a: "R_IA64_GPREL22" /* @gprel(sym + add), add imm22 */,
  0x2b: "R_IA64_GPREL64I" /* @gprel(sym + add), mov imm64 */,
  0x2c: "R_IA64_GPREL32MSB" /* @gprel(sym + add), data4 MSB */,
  0x2d: "R_IA64_GPREL32LSB" /* @gprel(sym + add), data4 LSB */,
  0x2e: "R_IA64_GPREL64MSB" /* @gprel(sym + add), data8 MSB */,
  0x2f: "R_IA64_GPREL64LSB" /* @gprel(sym + add), data8 LSB */,
  0x32: "R_IA64_LTOFF22" /* @ltoff(sym + add), add imm22 */,
  0x33: "R_IA64_LTOFF64I" /* @ltoff(sym + add), mov imm64 */,
  0x3a: "R_IA64_PLTOFF22" /* @pltoff(sym + add), add imm22 */,
  0x3b: "R_IA64_PLTOFF64I" /* @pltoff(sym + add), mov imm64 */,
  0x3e: "R_IA64_PLTOFF64MSB" /* @pltoff(sym + add), data8 MSB */,
  0x3f: "R_IA64_PLTOFF64LSB" /* @pltoff(sym + add), data8 LSB */,
  0x43: "R_IA64_FPTR64I" /* @fptr(sym + add), mov imm64 */,
  0x44: "R_IA64_FPTR32MSB" /* @fptr(sym + add), data4 MSB */,
  0x45: "R_IA64_FPTR32LSB" /* @fptr(sym + add), data4 LSB */,
  0x46: "R_IA64_FPTR64MSB" /* @fptr(sym + add), data8 MSB */,
  0x47: "R_IA64_FPTR64LSB" /* @fptr(sym + add), data8 LSB */,
  0x48: "R_IA64_PCREL60B" /* @pcrel(sym + add), brl */,
  0x49: "R_IA64_PCREL21B" /* @pcrel(sym + add), ptb, call */,
  0x4a: "R_IA64_PCREL21M" /* @pcrel(sym + add), chk.s */,
  0x4b: "R_IA64_PCREL21F" /* @pcrel(sym + add), fchkf */,
  0x4c: "R_IA64_PCREL32MSB" /* @pcrel(sym + add), data4 MSB */,
  0x4d: "R_IA64_PCREL32LSB" /* @pcrel(sym + add), data4 LSB */,
  0x4e: "R_IA64_PCREL64MSB" /* @pcrel(sym + add), data8 MSB */,
  0x4f: "R_IA64_PCREL64LSB" /* @pcrel(sym + add), data8 LSB */,
  0x52: "R_IA64_LTOFF_FPTR22" /* @ltoff(@fptr(s+a)), imm22 */,
  0x53: "R_IA64_LTOFF_FPTR64I" /* @ltoff(@fptr(s+a)), imm64 */,
  0x54: "R_IA64_LTOFF_FPTR32MSB" /* @ltoff(@fptr(s+a)), data4 MSB */,
  0x55: "R_IA64_LTOFF_FPTR32LSB" /* @ltoff(@fptr(s+a)), data4 LSB */,
  0x56: "R_IA64_LTOFF_FPTR64MSB" /* @ltoff(@fptr(s+a)), data8 MSB */,
  0x57: "R_IA64_LTOFF_FPTR64LSB" /* @ltoff(@fptr(s+a)), data8 LSB */,
  0x5c: "R_IA64_SEGREL32MSB" /* @segrel(sym + add), data4 MSB */,
  0x5d: "R_IA64_SEGREL32LSB" /* @segrel(sym + add), data4 LSB */,
  0x5e: "R_IA64_SEGREL64MSB" /* @segrel(sym + add), data8 MSB */,
  0x5f: "R_IA64_SEGREL64LSB" /* @segrel(sym + add), data8 LSB */,
  0x64: "R_IA64_SECREL32MSB" /* @secrel(sym + add), data4 MSB */,
  0x65: "R_IA64_SECREL32LSB" /* @secrel(sym + add), data4 LSB */,
  0x66: "R_IA64_SECREL64MSB" /* @secrel(sym + add), data8 MSB */,
  0x67: "R_IA64_SECREL64LSB" /* @secrel(sym + add), data8 LSB */,
  0x6c: "R_IA64_REL32MSB" /* data 4 + REL */,
  0x6d: "R_IA64_REL32LSB" /* data 4 + REL */,
  0x6e: "R_IA64_REL64MSB" /* data 8 + REL */,
  0x6f: "R_IA64_REL64LSB" /* data 8 + REL */,
  0x74: "R_IA64_LTV32MSB" /* symbol + addend, data4 MSB */,
  0x75: "R_IA64_LTV32LSB" /* symbol + addend, data4 LSB */,
  0x76: "R_IA64_LTV64MSB" /* symbol + addend, data8 MSB */,
  0x77: "R_IA64_LTV64LSB" /* symbol + addend, data8 LSB */,
  0x79: "R_IA64_PCREL21BI" /* @pcrel(sym + add), 21bit inst */,
  0x7a: "R_IA64_PCREL22" /* @pcrel(sym + add), 22bit inst */,
  0x7b: "R_IA64_PCREL64I" /* @pcrel(sym + add), 64bit inst */,
  0x80: "R_IA64_IPLTMSB" /* dynamic reloc, imported PLT, MSB */,
  0x81: "R_IA64_IPLTLSB" /* dynamic reloc, imported PLT, LSB */,
  0x84: "R_IA64_COPY" /* copy relocation */,
  0x85: "R_IA64_SUB" /* Addend and symbol difference */,
  0x86: "R_IA64_LTOFF22X" /* LTOFF22, relaxable.  */,
  0x87: "R_IA64_LDXMOV" /* Use of LTOFF22X.  */,
  0x91: "R_IA64_TPREL14" /* @tprel(sym + add), imm14 */,
  0x92: "R_IA64_TPREL22" /* @tprel(sym + add), imm22 */,
  0x93: "R_IA64_TPREL64I" /* @tprel(sym + add), imm64 */,
  0x96: "R_IA64_TPREL64MSB" /* @tprel(sym + add), data8 MSB */,
  0x97: "R_IA64_TPREL64LSB" /* @tprel(sym + add), data8 LSB */,
  0x9a: "R_IA64_LTOFF_TPREL22" /* @ltoff(@tprel(s+a)), imm2 */,
  0xa6: "R_IA64_DTPMOD64MSB" /* @dtpmod(sym + add), data8 MSB */,
  0xa7: "R_IA64_DTPMOD64LSB" /* @dtpmod(sym + add), data8 LSB */,
  0xaa: "R_IA64_LTOFF_DTPMOD22" /* @ltoff(@dtpmod(sym + add)), imm22 */,
  0xb1: "R_IA64_DTPREL14" /* @dtprel(sym + add), imm14 */,
  0xb2: "R_IA64_DTPREL22" /* @dtprel(sym + add), imm22 */,
  0xb3: "R_IA64_DTPREL64I" /* @dtprel(sym + add), imm64 */,
  0xb4: "R_IA64_DTPREL32MSB" /* @dtprel(sym + add), data4 MSB */,
  0xb5: "R_IA64_DTPREL32LSB" /* @dtprel(sym + add), data4 LSB */,
  0xb6: "R_IA64_DTPREL64MSB" /* @dtprel(sym + add), data8 MSB */,
  0xb7: "R_IA64_DTPREL64LSB" /* @dtprel(sym + add), data8 LSB */,
  0xba: "R_IA64_LTOFF_DTPREL22" /* @ltoff(@dtprel(s+a)), imm22 */,
};
export const S390_TypeMap: DictionaryType = {
  0: "R_390_NONE" /* No reloc.  */,
  1: "R_390_8" /* Direct 8 bit.  */,
  2: "R_390_12" /* Direct 12 bit.  */,
  3: "R_390_16" /* Direct 16 bit.  */,
  4: "R_390_32" /* Direct 32 bit.  */,
  5: "R_390_PC32" /* PC relative 32 bit.	*/,
  6: "R_390_GOT12" /* 12 bit GOT offset.  */,
  7: "R_390_GOT32" /* 32 bit GOT offset.  */,
  8: "R_390_PLT32" /* 32 bit PC relative PLT address.  */,
  9: "R_390_COPY" /* Copy symbol at runtime.  */,
  10: "R_390_GLOB_DAT" /* Create GOT entry.  */,
  11: "R_390_JMP_SLOT" /* Create PLT entry.  */,
  12: "R_390_RELATIVE" /* Adjust by program base.  */,
  13: "R_390_GOTOFF32" /* 32 bit offset to GOT.	 */,
  14: "R_390_GOTPC" /* 32 bit PC relative offset to GOT.  */,
  15: "R_390_GOT16" /* 16 bit GOT offset.  */,
  16: "R_390_PC16" /* PC relative 16 bit.	*/,
  17: "R_390_PC16DBL" /* PC relative 16 bit shifted by 1.  */,
  18: "R_390_PLT16DBL" /* 16 bit PC rel. PLT shifted by 1.  */,
  19: "R_390_PC32DBL" /* PC relative 32 bit shifted by 1.  */,
  20: "R_390_PLT32DBL" /* 32 bit PC rel. PLT shifted by 1.  */,
  21: "R_390_GOTPCDBL" /* 32 bit PC rel. GOT shifted by 1.  */,
  22: "R_390_64" /* Direct 64 bit.  */,
  23: "R_390_PC64" /* PC relative 64 bit.	*/,
  24: "R_390_GOT64" /* 64 bit GOT offset.  */,
  25: "R_390_PLT64" /* 64 bit PC relative PLT address.  */,
  26: "R_390_GOTENT" /* 32 bit PC rel. to GOT entry >> 1. */,
  27: "R_390_GOTOFF16" /* 16 bit offset to GOT. */,
  28: "R_390_GOTOFF64" /* 64 bit offset to GOT. */,
  29: "R_390_GOTPLT12" /* 12 bit offset to jump slot.	*/,
  30: "R_390_GOTPLT16" /* 16 bit offset to jump slot.	*/,
  31: "R_390_GOTPLT32" /* 32 bit offset to jump slot.	*/,
  32: "R_390_GOTPLT64" /* 64 bit offset to jump slot.	*/,
  33: "R_390_GOTPLTENT" /* 32 bit rel. offset to jump slot.  */,
  34: "R_390_PLTOFF16" /* 16 bit offset from GOT to PLT. */,
  35: "R_390_PLTOFF32" /* 32 bit offset from GOT to PLT. */,
  36: "R_390_PLTOFF64" /* 16 bit offset from GOT to PLT. */,
  37: "R_390_TLS_LOAD" /* Tag for load insn in TLS code.  */,
  38: "R_390_TLS_GDCALL" /* Tag for function call in general dynamic TLS code. */,
  39: "R_390_TLS_LDCALL" /* Tag for function call in local dynamic TLS code. */,
  40: "R_390_TLS_GD32" /* Direct 32 bit for general dynamic thread local data.  */,
  41: "R_390_TLS_GD64" /* Direct 64 bit for general dynamic thread local data.  */,
  42: "R_390_TLS_GOTIE12" /* 12 bit GOT offset for static TLS block offset.  */,
  43: "R_390_TLS_GOTIE32" /* 32 bit GOT offset for static TLS block offset.  */,
  44: "R_390_TLS_GOTIE64" /* 64 bit GOT offset for static TLS block offset. */,
  45: "R_390_TLS_LDM32" /* Direct 32 bit for local dynamic thread local data in LE code.  */,
  46: "R_390_TLS_LDM64" /* Direct 64 bit for local dynamic thread local data in LE code.  */,
  47: "R_390_TLS_IE32" /* 32 bit address of GOT entry for negated static TLS block offset.  */,
  48: "R_390_TLS_IE64" /* 64 bit address of GOT entry for negated static TLS block offset.  */,
  49: "R_390_TLS_IEENT" /* 32 bit rel. offset to GOT entry for negated static TLS block offset.  */,
  50: "R_390_TLS_LE32" /* 32 bit negated offset relative to static TLS block.  */,
  51: "R_390_TLS_LE64" /* 64 bit negated offset relative to static TLS block.  */,
  52: "R_390_TLS_LDO32" /* 32 bit offset relative to TLS block.  */,
  53: "R_390_TLS_LDO64" /* 64 bit offset relative to TLS block.  */,
  54: "R_390_TLS_DTPMOD" /* ID of module containing symbol.  */,
  55: "R_390_TLS_DTPOFF" /* Offset in TLS block.	 */,
  56: "R_390_TLS_TPOFF" /* Negated offset in static TLS block.  */,
  57: "R_390_20" /* Direct 20 bit.  */,
  58: "R_390_GOT20" /* 20 bit GOT offset.  */,
  59: "R_390_GOTPLT20" /* 20 bit offset to jump slot.  */,
  60: "R_390_TLS_GOTIE20" /* 20 bit GOT offset for static TLS block offset.  */,
  61: "R_390_IRELATIVE" /* STT_GNU_IFUNC relocation.  */,
  62: "R_390_NUM",
};
export const CRIS_TypeMap: DictionaryType = {
  0: "R_CRIS_NONE",
  1: "R_CRIS_8",
  2: "R_CRIS_16",
  3: "R_CRIS_32",
  4: "R_CRIS_8_PCREL",
  5: "R_CRIS_16_PCREL",
  6: "R_CRIS_32_PCREL",
  7: "R_CRIS_GNU_VTINHERIT",
  8: "R_CRIS_GNU_VTENTRY",
  9: "R_CRIS_COPY",
  10: "R_CRIS_GLOB_DAT",
  11: "R_CRIS_JUMP_SLOT",
  12: "R_CRIS_RELATIVE",
  13: "R_CRIS_16_GOT",
  14: "R_CRIS_32_GOT",
  15: "R_CRIS_16_GOTPLT",
  16: "R_CRIS_32_GOTPLT",
  17: "R_CRIS_32_GOTREL",
  18: "R_CRIS_32_PLT_GOTREL",
  19: "R_CRIS_32_PLT_PCREL",
  20: "R_CRIS_NUM",
};
export const AM33_TypeMap: DictionaryType = {
  0: "R_MN10300_NONE" /* No reloc.  */,
  1: "R_MN10300_32" /* Direct 32 bit.  */,
  2: "R_MN10300_16" /* Direct 16 bit.  */,
  3: "R_MN10300_8" /* Direct 8 bit.  */,
  4: "R_MN10300_PCREL32" /* PC-relative 32-bit.  */,
  5: "R_MN10300_PCREL16" /* PC-relative 16-bit signed.  */,
  6: "R_MN10300_PCREL8" /* PC-relative 8-bit signed.  */,
  7: "R_MN10300_GNU_VTINHERIT" /* Ancient C++ vtable garbage... */,
  8: "R_MN10300_GNU_VTENTRY" /* ... collection annotation.  */,
  9: "R_MN10300_24" /* Direct 24 bit.  */,
  10: "R_MN10300_GOTPC32" /* 32-bit PCrel offset to GOT.  */,
  11: "R_MN10300_GOTPC16" /* 16-bit PCrel offset to GOT.  */,
  12: "R_MN10300_GOTOFF32" /* 32-bit offset from GOT.  */,
  13: "R_MN10300_GOTOFF24" /* 24-bit offset from GOT.  */,
  14: "R_MN10300_GOTOFF16" /* 16-bit offset from GOT.  */,
  15: "R_MN10300_PLT32" /* 32-bit PCrel to PLT entry.  */,
  16: "R_MN10300_PLT16" /* 16-bit PCrel to PLT entry.  */,
  17: "R_MN10300_GOT32" /* 32-bit offset to GOT entry.  */,
  18: "R_MN10300_GOT24" /* 24-bit offset to GOT entry.  */,
  19: "R_MN10300_GOT16" /* 16-bit offset to GOT entry.  */,
  20: "R_MN10300_COPY" /* Copy symbol at runtime.  */,
  21: "R_MN10300_GLOB_DAT" /* Create GOT entry.  */,
  22: "R_MN10300_JMP_SLOT" /* Create PLT entry.  */,
  23: "R_MN10300_RELATIVE" /* Adjust by program base.  */,
  24: "R_MN10300_TLS_GD" /* 32-bit offset for global dynamic.  */,
  25: "R_MN10300_TLS_LD" /* 32-bit offset for local dynamic.  */,
  26: "R_MN10300_TLS_LDO" /* Module-relative offset.  */,
  27: "R_MN10300_TLS_GOTIE" /* GOT offset for static TLS block offset.  */,
  28: "R_MN10300_TLS_IE" /* GOT address for static TLS block offset.  */,
  29: "R_MN10300_TLS_LE" /* Offset relative to static TLS block.  */,
  30: "R_MN10300_TLS_DTPMOD" /* ID of module containing symbol.  */,
  31: "R_MN10300_TLS_DTPOFF" /* Offset in module TLS block.  */,
  32: "R_MN10300_TLS_TPOFF" /* Offset in static TLS block.  */,
  33: "R_MN10300_SYM_DIFF" /* Adjustment for next reloc as needed by linker relaxation.  */,
  34: "R_MN10300_ALIGN" /* Alignment requirement for linker relaxation.  */,
  35: "R_MN10300_NUM",
};
export const MicroBlaze_TypeMap: DictionaryType = {
  0: "R_MICROBLAZE_NONE" /* No reloc. */,
  1: "R_MICROBLAZE_32" /* Direct 32 bit. */,
  2: "R_MICROBLAZE_32_PCREL" /* PC relative 32 bit. */,
  3: "R_MICROBLAZE_64_PCREL" /* PC relative 64 bit. */,
  4: "R_MICROBLAZE_32_PCREL_LO" /* Low 16 bits of PCREL32. */,
  5: "R_MICROBLAZE_64" /* Direct 64 bit. */,
  6: "R_MICROBLAZE_32_LO" /* Low 16 bit. */,
  7: "R_MICROBLAZE_SRO32" /* Read-only small data area. */,
  8: "R_MICROBLAZE_SRW32" /* Read-write small data area. */,
  9: "R_MICROBLAZE_64_NONE" /* No reloc. */,
  10: "R_MICROBLAZE_32_SYM_OP_SYM" /* Symbol Op Symbol relocation. */,
  11: "R_MICROBLAZE_GNU_VTINHERIT" /* GNU C++ vtable hierarchy. */,
  12: "R_MICROBLAZE_GNU_VTENTRY" /* GNU C++ vtable member usage. */,
  13: "R_MICROBLAZE_GOTPC_64" /* PC-relative GOT offset.  */,
  14: "R_MICROBLAZE_GOT_64" /* GOT entry offset.  */,
  15: "R_MICROBLAZE_PLT_64" /* PLT offset (PC-relative).  */,
  16: "R_MICROBLAZE_REL" /* Adjust by program base.  */,
  17: "R_MICROBLAZE_JUMP_SLOT" /* Create PLT entry.  */,
  18: "R_MICROBLAZE_GLOB_DAT" /* Create GOT entry.  */,
  19: "R_MICROBLAZE_GOTOFF_64" /* 64 bit offset to GOT. */,
  20: "R_MICROBLAZE_GOTOFF_32" /* 32 bit offset to GOT. */,
  21: "R_MICROBLAZE_COPY" /* Runtime copy.  */,
  22: "R_MICROBLAZE_TLS" /* TLS Reloc. */,
  23: "R_MICROBLAZE_TLSGD" /* TLS General Dynamic. */,
  24: "R_MICROBLAZE_TLSLD" /* TLS Local Dynamic. */,
  25: "R_MICROBLAZE_TLSDTPMOD32" /* TLS Module ID. */,
  26: "R_MICROBLAZE_TLSDTPREL32" /* TLS Offset Within TLS Block. */,
  27: "R_MICROBLAZE_TLSDTPREL64" /* TLS Offset Within TLS Block. */,
  28: "R_MICROBLAZE_TLSGOTTPREL32" /* TLS Offset From Thread Pointer. */,
  29: "R_MICROBLAZE_TLSTPREL32" /* TLS Offset From Thread Pointer. */,
};
export const Nios2_TypeMap: DictionaryType = {
  0: "R_NIOS2_NONE" /* No reloc.  */,
  1: "R_NIOS2_S16" /* Direct signed 16 bit.  */,
  2: "R_NIOS2_U16" /* Direct unsigned 16 bit.  */,
  3: "R_NIOS2_PCREL16" /* PC relative 16 bit.  */,
  4: "R_NIOS2_CALL26" /* Direct call.  */,
  5: "R_NIOS2_IMM5" /* 5 bit constant expression.  */,
  6: "R_NIOS2_CACHE_OPX" /* 5 bit expression, shift 22.  */,
  7: "R_NIOS2_IMM6" /* 6 bit constant expression.  */,
  8: "R_NIOS2_IMM8" /* 8 bit constant expression.  */,
  9: "R_NIOS2_HI16" /* High 16 bit.  */,
  10: "R_NIOS2_LO16" /* Low 16 bit.  */,
  11: "R_NIOS2_HIADJ16" /* High 16 bit, adjusted.  */,
  12: "R_NIOS2_BFD_RELOC_32" /* 32 bit symbol value + addend.  */,
  13: "R_NIOS2_BFD_RELOC_16" /* 16 bit symbol value + addend.  */,
  14: "R_NIOS2_BFD_RELOC_8" /* 8 bit symbol value + addend.  */,
  15: "R_NIOS2_GPREL" /* 16 bit GP pointer offset.  */,
  16: "R_NIOS2_GNU_VTINHERIT" /* GNU C++ vtable hierarchy.  */,
  17: "R_NIOS2_GNU_VTENTRY" /* GNU C++ vtable member usage.  */,
  18: "R_NIOS2_UJMP" /* Unconditional branch.  */,
  19: "R_NIOS2_CJMP" /* Conditional branch.  */,
  20: "R_NIOS2_CALLR" /* Indirect call through register.  */,
  21: "R_NIOS2_ALIGN" /* Alignment requirement for linker relaxation.  */,
  22: "R_NIOS2_GOT16" /* 16 bit GOT entry.  */,
  23: "R_NIOS2_CALL16" /* 16 bit GOT entry for function.  */,
  24: "R_NIOS2_GOTOFF_LO" /* %lo of offset to GOT pointer.  */,
  25: "R_NIOS2_GOTOFF_HA" /* %hiadj of offset to GOT pointer.  */,
  26: "R_NIOS2_PCREL_LO" /* %lo of PC relative offset.  */,
  27: "R_NIOS2_PCREL_HA" /* %hiadj of PC relative offset.  */,
  28: "R_NIOS2_TLS_GD16" /* 16 bit GOT offset for TLS GD.  */,
  29: "R_NIOS2_TLS_LDM16" /* 16 bit GOT offset for TLS LDM.  */,
  30: "R_NIOS2_TLS_LDO16" /* 16 bit module relative offset.  */,
  31: "R_NIOS2_TLS_IE16" /* 16 bit GOT offset for TLS IE.  */,
  32: "R_NIOS2_TLS_LE16" /* 16 bit LE TP-relative offset.  */,
  33: "R_NIOS2_TLS_DTPMOD" /* Module number.  */,
  34: "R_NIOS2_TLS_DTPREL" /* Module-relative offset.  */,
  35: "R_NIOS2_TLS_TPREL" /* TP-relative offset.  */,
  36: "R_NIOS2_COPY" /* Copy symbol at runtime.  */,
  37: "R_NIOS2_GLOB_DAT" /* Create GOT entry.  */,
  38: "R_NIOS2_JUMP_SLOT" /* Create PLT entry.  */,
  39: "R_NIOS2_RELATIVE" /* Adjust by program base.  */,
  40: "R_NIOS2_GOTOFF" /* 16 bit offset to GOT pointer.  */,
  41: "R_NIOS2_CALL26_NOAT" /* Direct call in .noat section.  */,
  42: "R_NIOS2_GOT_LO" /* %lo() of GOT entry.  */,
  43: "R_NIOS2_GOT_HA" /* %hiadj() of GOT entry.  */,
  44: "R_NIOS2_CALL_LO" /* %lo() of function GOT entry.  */,
  45: "R_NIOS2_CALL_HA" /* %hiadj() of function GOT entry.  */,
};
export const TILEPro_TypeMap: DictionaryType = {
  0: "R_TILEPRO_NONE" /* No reloc */,
  1: "R_TILEPRO_32" /* Direct 32 bit */,
  2: "R_TILEPRO_16" /* Direct 16 bit */,
  3: "R_TILEPRO_8" /* Direct 8 bit */,
  4: "R_TILEPRO_32_PCREL" /* PC relative 32 bit */,
  5: "R_TILEPRO_16_PCREL" /* PC relative 16 bit */,
  6: "R_TILEPRO_8_PCREL" /* PC relative 8 bit */,
  7: "R_TILEPRO_LO16" /* Low 16 bit */,
  8: "R_TILEPRO_HI16" /* High 16 bit */,
  9: "R_TILEPRO_HA16" /* High 16 bit, adjusted */,
  10: "R_TILEPRO_COPY" /* Copy relocation */,
  11: "R_TILEPRO_GLOB_DAT" /* Create GOT entry */,
  12: "R_TILEPRO_JMP_SLOT" /* Create PLT entry */,
  13: "R_TILEPRO_RELATIVE" /* Adjust by program base */,
  14: "R_TILEPRO_BROFF_X1" /* X1 pipe branch offset */,
  15: "R_TILEPRO_JOFFLONG_X1" /* X1 pipe jump offset */,
  16: "R_TILEPRO_JOFFLONG_X1_PLT" /* X1 pipe jump offset to PLT */,
  17: "R_TILEPRO_IMM8_X0" /* X0 pipe 8-bit */,
  18: "R_TILEPRO_IMM8_Y0" /* Y0 pipe 8-bit */,
  19: "R_TILEPRO_IMM8_X1" /* X1 pipe 8-bit */,
  20: "R_TILEPRO_IMM8_Y1" /* Y1 pipe 8-bit */,
  21: "R_TILEPRO_MT_IMM15_X1" /* X1 pipe mtspr */,
  22: "R_TILEPRO_MF_IMM15_X1" /* X1 pipe mfspr */,
  23: "R_TILEPRO_IMM16_X0" /* X0 pipe 16-bit */,
  24: "R_TILEPRO_IMM16_X1" /* X1 pipe 16-bit */,
  25: "R_TILEPRO_IMM16_X0_LO" /* X0 pipe low 16-bit */,
  26: "R_TILEPRO_IMM16_X1_LO" /* X1 pipe low 16-bit */,
  27: "R_TILEPRO_IMM16_X0_HI" /* X0 pipe high 16-bit */,
  28: "R_TILEPRO_IMM16_X1_HI" /* X1 pipe high 16-bit */,
  29: "R_TILEPRO_IMM16_X0_HA" /* X0 pipe high 16-bit, adjusted */,
  30: "R_TILEPRO_IMM16_X1_HA" /* X1 pipe high 16-bit, adjusted */,
  31: "R_TILEPRO_IMM16_X0_PCREL" /* X0 pipe PC relative 16 bit */,
  32: "R_TILEPRO_IMM16_X1_PCREL" /* X1 pipe PC relative 16 bit */,
  33: "R_TILEPRO_IMM16_X0_LO_PCREL" /* X0 pipe PC relative low 16 bit */,
  34: "R_TILEPRO_IMM16_X1_LO_PCREL" /* X1 pipe PC relative low 16 bit */,
  35: "R_TILEPRO_IMM16_X0_HI_PCREL" /* X0 pipe PC relative high 16 bit */,
  36: "R_TILEPRO_IMM16_X1_HI_PCREL" /* X1 pipe PC relative high 16 bit */,
  37: "R_TILEPRO_IMM16_X0_HA_PCREL" /* X0 pipe PC relative ha() 16 bit */,
  38: "R_TILEPRO_IMM16_X1_HA_PCREL" /* X1 pipe PC relative ha() 16 bit */,
  39: "R_TILEPRO_IMM16_X0_GOT" /* X0 pipe 16-bit GOT offset */,
  40: "R_TILEPRO_IMM16_X1_GOT" /* X1 pipe 16-bit GOT offset */,
  41: "R_TILEPRO_IMM16_X0_GOT_LO" /* X0 pipe low 16-bit GOT offset */,
  42: "R_TILEPRO_IMM16_X1_GOT_LO" /* X1 pipe low 16-bit GOT offset */,
  43: "R_TILEPRO_IMM16_X0_GOT_HI" /* X0 pipe high 16-bit GOT offset */,
  44: "R_TILEPRO_IMM16_X1_GOT_HI" /* X1 pipe high 16-bit GOT offset */,
  45: "R_TILEPRO_IMM16_X0_GOT_HA" /* X0 pipe ha() 16-bit GOT offset */,
  46: "R_TILEPRO_IMM16_X1_GOT_HA" /* X1 pipe ha() 16-bit GOT offset */,
  47: "R_TILEPRO_MMSTART_X0" /* X0 pipe mm "start" */,
  48: "R_TILEPRO_MMEND_X0" /* X0 pipe mm "end" */,
  49: "R_TILEPRO_MMSTART_X1" /* X1 pipe mm "start" */,
  50: "R_TILEPRO_MMEND_X1" /* X1 pipe mm "end" */,
  51: "R_TILEPRO_SHAMT_X0" /* X0 pipe shift amount */,
  52: "R_TILEPRO_SHAMT_X1" /* X1 pipe shift amount */,
  53: "R_TILEPRO_SHAMT_Y0" /* Y0 pipe shift amount */,
  54: "R_TILEPRO_SHAMT_Y1" /* Y1 pipe shift amount */,
  55: "R_TILEPRO_DEST_IMM8_X1" /* X1 pipe destination 8-bit */,
  /* Relocs 56-59 are currently not defined.  */
  60: "R_TILEPRO_TLS_GD_CALL" /* "jal" for TLS GD */,
  61: "R_TILEPRO_IMM8_X0_TLS_GD_ADD" /* X0 pipe "addi" for TLS GD */,
  62: "R_TILEPRO_IMM8_X1_TLS_GD_ADD" /* X1 pipe "addi" for TLS GD */,
  63: "R_TILEPRO_IMM8_Y0_TLS_GD_ADD" /* Y0 pipe "addi" for TLS GD */,
  64: "R_TILEPRO_IMM8_Y1_TLS_GD_ADD" /* Y1 pipe "addi" for TLS GD */,
  65: "R_TILEPRO_TLS_IE_LOAD" /* "lw_tls" for TLS IE */,
  66: "R_TILEPRO_IMM16_X0_TLS_GD" /* X0 pipe 16-bit TLS GD offset */,
  67: "R_TILEPRO_IMM16_X1_TLS_GD" /* X1 pipe 16-bit TLS GD offset */,
  68: "R_TILEPRO_IMM16_X0_TLS_GD_LO" /* X0 pipe low 16-bit TLS GD offset */,
  69: "R_TILEPRO_IMM16_X1_TLS_GD_LO" /* X1 pipe low 16-bit TLS GD offset */,
  70: "R_TILEPRO_IMM16_X0_TLS_GD_HI" /* X0 pipe high 16-bit TLS GD offset */,
  71: "R_TILEPRO_IMM16_X1_TLS_GD_HI" /* X1 pipe high 16-bit TLS GD offset */,
  72: "R_TILEPRO_IMM16_X0_TLS_GD_HA" /* X0 pipe ha() 16-bit TLS GD offset */,
  73: "R_TILEPRO_IMM16_X1_TLS_GD_HA" /* X1 pipe ha() 16-bit TLS GD offset */,
  74: "R_TILEPRO_IMM16_X0_TLS_IE" /* X0 pipe 16-bit TLS IE offset */,
  75: "R_TILEPRO_IMM16_X1_TLS_IE" /* X1 pipe 16-bit TLS IE offset */,
  76: "R_TILEPRO_IMM16_X0_TLS_IE_LO" /* X0 pipe low 16-bit TLS IE offset */,
  77: "R_TILEPRO_IMM16_X1_TLS_IE_LO" /* X1 pipe low 16-bit TLS IE offset */,
  78: "R_TILEPRO_IMM16_X0_TLS_IE_HI" /* X0 pipe high 16-bit TLS IE offset */,
  79: "R_TILEPRO_IMM16_X1_TLS_IE_HI" /* X1 pipe high 16-bit TLS IE offset */,
  80: "R_TILEPRO_IMM16_X0_TLS_IE_HA" /* X0 pipe ha() 16-bit TLS IE offset */,
  81: "R_TILEPRO_IMM16_X1_TLS_IE_HA" /* X1 pipe ha() 16-bit TLS IE offset */,
  82: "R_TILEPRO_TLS_DTPMOD32" /* ID of module containing symbol */,
  83: "R_TILEPRO_TLS_DTPOFF32" /* Offset in TLS block */,
  84: "R_TILEPRO_TLS_TPOFF32" /* Offset in static TLS block */,
  85: "R_TILEPRO_IMM16_X0_TLS_LE" /* X0 pipe 16-bit TLS LE offset */,
  86: "R_TILEPRO_IMM16_X1_TLS_LE" /* X1 pipe 16-bit TLS LE offset */,
  87: "R_TILEPRO_IMM16_X0_TLS_LE_LO" /* X0 pipe low 16-bit TLS LE offset */,
  88: "R_TILEPRO_IMM16_X1_TLS_LE_LO" /* X1 pipe low 16-bit TLS LE offset */,
  89: "R_TILEPRO_IMM16_X0_TLS_LE_HI" /* X0 pipe high 16-bit TLS LE offset */,
  90: "R_TILEPRO_IMM16_X1_TLS_LE_HI" /* X1 pipe high 16-bit TLS LE offset */,
  91: "R_TILEPRO_IMM16_X0_TLS_LE_HA" /* X0 pipe ha() 16-bit TLS LE offset */,
  92: "R_TILEPRO_IMM16_X1_TLS_LE_HA" /* X1 pipe ha() 16-bit TLS LE offset */,
  128: "R_TILEPRO_GNU_VTINHERIT" /* GNU C++ vtable hierarchy */,
  129: "R_TILEPRO_GNU_VTENTRY" /* GNU C++ vtable member usage */,
  130: "R_TILEPRO_NUM",
};
export const TILEGx_TypeMap: DictionaryType = {
  0: "R_TILEGX_NONE" /* No reloc */,
  1: "R_TILEGX_64" /* Direct 64 bit */,
  2: "R_TILEGX_32" /* Direct 32 bit */,
  3: "R_TILEGX_16" /* Direct 16 bit */,
  4: "R_TILEGX_8" /* Direct 8 bit */,
  5: "R_TILEGX_64_PCREL" /* PC relative 64 bit */,
  6: "R_TILEGX_32_PCREL" /* PC relative 32 bit */,
  7: "R_TILEGX_16_PCREL" /* PC relative 16 bit */,
  8: "R_TILEGX_8_PCREL" /* PC relative 8 bit */,
  9: "R_TILEGX_HW0" /* hword 0 16-bit */,
  10: "R_TILEGX_HW1" /* hword 1 16-bit */,
  11: "R_TILEGX_HW2" /* hword 2 16-bit */,
  12: "R_TILEGX_HW3" /* hword 3 16-bit */,
  13: "R_TILEGX_HW0_LAST" /* last hword 0 16-bit */,
  14: "R_TILEGX_HW1_LAST" /* last hword 1 16-bit */,
  15: "R_TILEGX_HW2_LAST" /* last hword 2 16-bit */,
  16: "R_TILEGX_COPY" /* Copy relocation */,
  17: "R_TILEGX_GLOB_DAT" /* Create GOT entry */,
  18: "R_TILEGX_JMP_SLOT" /* Create PLT entry */,
  19: "R_TILEGX_RELATIVE" /* Adjust by program base */,
  20: "R_TILEGX_BROFF_X1" /* X1 pipe branch offset */,
  21: "R_TILEGX_JUMPOFF_X1" /* X1 pipe jump offset */,
  22: "R_TILEGX_JUMPOFF_X1_PLT" /* X1 pipe jump offset to PLT */,
  23: "R_TILEGX_IMM8_X0" /* X0 pipe 8-bit */,
  24: "R_TILEGX_IMM8_Y0" /* Y0 pipe 8-bit */,
  25: "R_TILEGX_IMM8_X1" /* X1 pipe 8-bit */,
  26: "R_TILEGX_IMM8_Y1" /* Y1 pipe 8-bit */,
  27: "R_TILEGX_DEST_IMM8_X1" /* X1 pipe destination 8-bit */,
  28: "R_TILEGX_MT_IMM14_X1" /* X1 pipe mtspr */,
  29: "R_TILEGX_MF_IMM14_X1" /* X1 pipe mfspr */,
  30: "R_TILEGX_MMSTART_X0" /* X0 pipe mm "start" */,
  31: "R_TILEGX_MMEND_X0" /* X0 pipe mm "end" */,
  32: "R_TILEGX_SHAMT_X0" /* X0 pipe shift amount */,
  33: "R_TILEGX_SHAMT_X1" /* X1 pipe shift amount */,
  34: "R_TILEGX_SHAMT_Y0" /* Y0 pipe shift amount */,
  35: "R_TILEGX_SHAMT_Y1" /* Y1 pipe shift amount */,
  36: "R_TILEGX_IMM16_X0_HW0" /* X0 pipe hword 0 */,
  37: "R_TILEGX_IMM16_X1_HW0" /* X1 pipe hword 0 */,
  38: "R_TILEGX_IMM16_X0_HW1" /* X0 pipe hword 1 */,
  39: "R_TILEGX_IMM16_X1_HW1" /* X1 pipe hword 1 */,
  40: "R_TILEGX_IMM16_X0_HW2" /* X0 pipe hword 2 */,
  41: "R_TILEGX_IMM16_X1_HW2" /* X1 pipe hword 2 */,
  42: "R_TILEGX_IMM16_X0_HW3" /* X0 pipe hword 3 */,
  43: "R_TILEGX_IMM16_X1_HW3" /* X1 pipe hword 3 */,
  44: "R_TILEGX_IMM16_X0_HW0_LAST" /* X0 pipe last hword 0 */,
  45: "R_TILEGX_IMM16_X1_HW0_LAST" /* X1 pipe last hword 0 */,
  46: "R_TILEGX_IMM16_X0_HW1_LAST" /* X0 pipe last hword 1 */,
  47: "R_TILEGX_IMM16_X1_HW1_LAST" /* X1 pipe last hword 1 */,
  48: "R_TILEGX_IMM16_X0_HW2_LAST" /* X0 pipe last hword 2 */,
  49: "R_TILEGX_IMM16_X1_HW2_LAST" /* X1 pipe last hword 2 */,
  50: "R_TILEGX_IMM16_X0_HW0_PCREL" /* X0 pipe PC relative hword 0 */,
  51: "R_TILEGX_IMM16_X1_HW0_PCREL" /* X1 pipe PC relative hword 0 */,
  52: "R_TILEGX_IMM16_X0_HW1_PCREL" /* X0 pipe PC relative hword 1 */,
  53: "R_TILEGX_IMM16_X1_HW1_PCREL" /* X1 pipe PC relative hword 1 */,
  54: "R_TILEGX_IMM16_X0_HW2_PCREL" /* X0 pipe PC relative hword 2 */,
  55: "R_TILEGX_IMM16_X1_HW2_PCREL" /* X1 pipe PC relative hword 2 */,
  56: "R_TILEGX_IMM16_X0_HW3_PCREL" /* X0 pipe PC relative hword 3 */,
  57: "R_TILEGX_IMM16_X1_HW3_PCREL" /* X1 pipe PC relative hword 3 */,
  58: "R_TILEGX_IMM16_X0_HW0_LAST_PCREL" /* X0 pipe PC-rel last hword 0 */,
  59: "R_TILEGX_IMM16_X1_HW0_LAST_PCREL" /* X1 pipe PC-rel last hword 0 */,
  60: "R_TILEGX_IMM16_X0_HW1_LAST_PCREL" /* X0 pipe PC-rel last hword 1 */,
  61: "R_TILEGX_IMM16_X1_HW1_LAST_PCREL" /* X1 pipe PC-rel last hword 1 */,
  62: "R_TILEGX_IMM16_X0_HW2_LAST_PCREL" /* X0 pipe PC-rel last hword 2 */,
  63: "R_TILEGX_IMM16_X1_HW2_LAST_PCREL" /* X1 pipe PC-rel last hword 2 */,
  64: "R_TILEGX_IMM16_X0_HW0_GOT" /* X0 pipe hword 0 GOT offset */,
  65: "R_TILEGX_IMM16_X1_HW0_GOT" /* X1 pipe hword 0 GOT offset */,
  66: "R_TILEGX_IMM16_X0_HW0_PLT_PCREL" /* X0 pipe PC-rel PLT hword 0 */,
  67: "R_TILEGX_IMM16_X1_HW0_PLT_PCREL" /* X1 pipe PC-rel PLT hword 0 */,
  68: "R_TILEGX_IMM16_X0_HW1_PLT_PCREL" /* X0 pipe PC-rel PLT hword 1 */,
  69: "R_TILEGX_IMM16_X1_HW1_PLT_PCREL" /* X1 pipe PC-rel PLT hword 1 */,
  70: "R_TILEGX_IMM16_X0_HW2_PLT_PCREL" /* X0 pipe PC-rel PLT hword 2 */,
  71: "R_TILEGX_IMM16_X1_HW2_PLT_PCREL" /* X1 pipe PC-rel PLT hword 2 */,
  72: "R_TILEGX_IMM16_X0_HW0_LAST_GOT" /* X0 pipe last hword 0 GOT offset */,
  73: "R_TILEGX_IMM16_X1_HW0_LAST_GOT" /* X1 pipe last hword 0 GOT offset */,
  74: "R_TILEGX_IMM16_X0_HW1_LAST_GOT" /* X0 pipe last hword 1 GOT offset */,
  75: "R_TILEGX_IMM16_X1_HW1_LAST_GOT" /* X1 pipe last hword 1 GOT offset */,
  76: "R_TILEGX_IMM16_X0_HW3_PLT_PCREL" /* X0 pipe PC-rel PLT hword 3 */,
  77: "R_TILEGX_IMM16_X1_HW3_PLT_PCREL" /* X1 pipe PC-rel PLT hword 3 */,
  78: "R_TILEGX_IMM16_X0_HW0_TLS_GD" /* X0 pipe hword 0 TLS GD offset */,
  79: "R_TILEGX_IMM16_X1_HW0_TLS_GD" /* X1 pipe hword 0 TLS GD offset */,
  80: "R_TILEGX_IMM16_X0_HW0_TLS_LE" /* X0 pipe hword 0 TLS LE offset */,
  81: "R_TILEGX_IMM16_X1_HW0_TLS_LE" /* X1 pipe hword 0 TLS LE offset */,
  82: "R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE" /* X0 pipe last hword 0 LE off */,
  83: "R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE" /* X1 pipe last hword 0 LE off */,
  84: "R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE" /* X0 pipe last hword 1 LE off */,
  85: "R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE" /* X1 pipe last hword 1 LE off */,
  86: "R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD" /* X0 pipe last hword 0 GD off */,
  87: "R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD" /* X1 pipe last hword 0 GD off */,
  88: "R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD" /* X0 pipe last hword 1 GD off */,
  89: "R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD" /* X1 pipe last hword 1 GD off */,
  /* Relocs 90-91 are currently not defined.  */
  92: "R_TILEGX_IMM16_X0_HW0_TLS_IE" /* X0 pipe hword 0 TLS IE offset */,
  93: "R_TILEGX_IMM16_X1_HW0_TLS_IE" /* X1 pipe hword 0 TLS IE offset */,
  94: "R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL" /* X0 pipe PC-rel PLT last hword 0 */,
  95: "R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL" /* X1 pipe PC-rel PLT last hword 0 */,
  96: "R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL" /* X0 pipe PC-rel PLT last hword 1 */,
  97: "R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL" /* X1 pipe PC-rel PLT last hword 1 */,
  98: "R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL" /* X0 pipe PC-rel PLT last hword 2 */,
  99: "R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL" /* X1 pipe PC-rel PLT last hword 2 */,
  100: "R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE" /* X0 pipe last hword 0 IE off */,
  101: "R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE" /* X1 pipe last hword 0 IE off */,
  102: "R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE" /* X0 pipe last hword 1 IE off */,
  103: "R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE" /* X1 pipe last hword 1 IE off */,
  /* Relocs 104-105 are currently not defined.  */
  106: "R_TILEGX_TLS_DTPMOD64" /* 64-bit ID of symbol's module */,
  107: "R_TILEGX_TLS_DTPOFF64" /* 64-bit offset in TLS block */,
  108: "R_TILEGX_TLS_TPOFF64" /* 64-bit offset in static TLS block */,
  109: "R_TILEGX_TLS_DTPMOD32" /* 32-bit ID of symbol's module */,
  110: "R_TILEGX_TLS_DTPOFF32" /* 32-bit offset in TLS block */,
  111: "R_TILEGX_TLS_TPOFF32" /* 32-bit offset in static TLS block */,
  112: "R_TILEGX_TLS_GD_CALL" /* "jal" for TLS GD */,
  113: "R_TILEGX_IMM8_X0_TLS_GD_ADD" /* X0 pipe "addi" for TLS GD */,
  114: "R_TILEGX_IMM8_X1_TLS_GD_ADD" /* X1 pipe "addi" for TLS GD */,
  115: "R_TILEGX_IMM8_Y0_TLS_GD_ADD" /* Y0 pipe "addi" for TLS GD */,
  116: "R_TILEGX_IMM8_Y1_TLS_GD_ADD" /* Y1 pipe "addi" for TLS GD */,
  117: "R_TILEGX_TLS_IE_LOAD" /* "ld_tls" for TLS IE */,
  118: "R_TILEGX_IMM8_X0_TLS_ADD" /* X0 pipe "addi" for TLS GD/IE */,
  119: "R_TILEGX_IMM8_X1_TLS_ADD" /* X1 pipe "addi" for TLS GD/IE */,
  120: "R_TILEGX_IMM8_Y0_TLS_ADD" /* Y0 pipe "addi" for TLS GD/IE */,
  121: "R_TILEGX_IMM8_Y1_TLS_ADD" /* Y1 pipe "addi" for TLS GD/IE */,
  128: "R_TILEGX_GNU_VTINHERIT" /* GNU C++ vtable hierarchy */,
  129: "R_TILEGX_GNU_VTENTRY" /* GNU C++ vtable member usage */,
  130: "R_TILEGX_NUM",
};
export const RISCV_TypeMap: DictionaryType = {
  0: "R_RISCV_NONE",
  1: "R_RISCV_32",
  2: "R_RISCV_64",
  3: "R_RISCV_RELATIVE",
  4: "R_RISCV_COPY",
  5: "R_RISCV_JUMP_SLOT",
  6: "R_RISCV_TLS_DTPMOD32",
  7: "R_RISCV_TLS_DTPMOD64",
  8: "R_RISCV_TLS_DTPREL32",
  9: "R_RISCV_TLS_DTPREL64",
  10: "R_RISCV_TLS_TPREL32",
  11: "R_RISCV_TLS_TPREL64",
  16: "R_RISCV_BRANCH",
  17: "R_RISCV_JAL",
  18: "R_RISCV_CALL",
  19: "R_RISCV_CALL_PLT",
  20: "R_RISCV_GOT_HI20",
  21: "R_RISCV_TLS_GOT_HI20",
  22: "R_RISCV_TLS_GD_HI20",
  23: "R_RISCV_PCREL_HI20",
  24: "R_RISCV_PCREL_LO12_I",
  25: "R_RISCV_PCREL_LO12_S",
  26: "R_RISCV_HI20",
  27: "R_RISCV_LO12_I",
  28: "R_RISCV_LO12_S",
  29: "R_RISCV_TPREL_HI20",
  30: "R_RISCV_TPREL_LO12_I",
  31: "R_RISCV_TPREL_LO12_S",
  32: "R_RISCV_TPREL_ADD",
  33: "R_RISCV_ADD8",
  34: "R_RISCV_ADD16",
  35: "R_RISCV_ADD32",
  36: "R_RISCV_ADD64",
  37: "R_RISCV_SUB8",
  38: "R_RISCV_SUB16",
  39: "R_RISCV_SUB32",
  40: "R_RISCV_SUB64",
  41: "R_RISCV_GNU_VTINHERIT",
  42: "R_RISCV_GNU_VTENTRY",
  43: "R_RISCV_ALIGN",
  44: "R_RISCV_RVC_BRANCH",
  45: "R_RISCV_RVC_JUMP",
  46: "R_RISCV_RVC_LUI",
  47: "R_RISCV_GPREL_I",
  48: "R_RISCV_GPREL_S",
  49: "R_RISCV_TPREL_I",
  50: "R_RISCV_TPREL_S",
  51: "R_RISCV_RELAX",
  52: "R_RISCV_SUB6",
  53: "R_RISCV_SET6",
  54: "R_RISCV_SET8",
  55: "R_RISCV_SET16",
  56: "R_RISCV_SET32",
  57: "R_RISCV_32_PCREL",
  58: "R_RISCV_NUM",
};
export const MetaG_TypeMap: DictionaryType = {
  0: "R_METAG_HIADDR16",
  1: "R_METAG_LOADDR16",
  2: "R_METAG_ADDR32" /* 32bit absolute address */,
  3: "R_METAG_NONE" /* No reloc */,
  4: "R_METAG_RELBRANCH",
  5: "R_METAG_GETSETOFF",
  /* Backward compatability */
  6: "R_METAG_REG32OP1",
  7: "R_METAG_REG32OP2",
  8: "R_METAG_REG32OP3",
  9: "R_METAG_REG16OP1",
  10: "R_METAG_REG16OP2",
  11: "R_METAG_REG16OP3",
  12: "R_METAG_REG32OP4",
  13: "R_METAG_HIOG",
  14: "R_METAG_LOOG",
  15: "R_METAG_REL8",
  16: "R_METAG_REL16",
  /* GNU */
  30: "R_METAG_GNU_VTINHERIT",
  31: "R_METAG_GNU_VTENTRY",
  /* PIC relocations */
  32: "R_METAG_HI16_GOTOFF",
  33: "R_METAG_LO16_GOTOFF",
  34: "R_METAG_GETSET_GOTOFF",
  35: "R_METAG_GETSET_GOT",
  36: "R_METAG_HI16_GOTPC",
  37: "R_METAG_LO16_GOTPC",
  38: "R_METAG_HI16_PLT",
  39: "R_METAG_LO16_PLT",
  40: "R_METAG_RELBRANCH_PLT",
  41: "R_METAG_GOTOFF",
  42: "R_METAG_PLT",
  43: "R_METAG_COPY",
  44: "R_METAG_JMP_SLOT",
  45: "R_METAG_RELATIVE",
  46: "R_METAG_GLOB_DAT",
  /* TLS relocations */
  47: "R_METAG_TLS_GD",
  48: "R_METAG_TLS_LDM",
  49: "R_METAG_TLS_LDO_HI16",
  50: "R_METAG_TLS_LDO_LO16",
  51: "R_METAG_TLS_LDO",
  52: "R_METAG_TLS_IE",
  53: "R_METAG_TLS_IENONPIC",
  54: "R_METAG_TLS_IENONPIC_HI16",
  55: "R_METAG_TLS_IENONPIC_LO16",
  56: "R_METAG_TLS_TPOFF",
  57: "R_METAG_TLS_DTPMOD",
  58: "R_METAG_TLS_DTPOFF",
  59: "R_METAG_TLS_LE",
  60: "R_METAG_TLS_LE_HI16",
  61: "R_METAG_TLS_LE_LO16",
};
export const NDS32_TypeMap: DictionaryType = {
  0: "R_NDS32_NONE",
  20: "R_NDS32_32_RELA",
  39: "R_NDS32_COPY",
  40: "R_NDS32_GLOB_DAT",
  41: "R_NDS32_JMP_SLOT",
  42: "R_NDS32_RELATIVE",
  102: "R_NDS32_TLS_TPOFF",
  119: "R_NDS32_TLS_DESC",
};
